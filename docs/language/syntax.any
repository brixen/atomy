#language anatomy

\title{Syntax}{syntax}

\use{anatomy/atomy}


\section{General Rules}{
  Atomy is whitespace-sensitive. Operators must be surrounded by whitespace,
  and indentation provides hints to the parser when you don't want to use
  commas. For example, \hl{foo-bar} is an identifier, while \hl{foo - bar} is
  subtraction.

  Requiring whitespace around operators enables the use of more symbols in
  identifier names, allowing pleasant conventions like question-marks (e.g.
  \hl{empty?}) and exclamation points (e.g. \hl{do-something-destructive!})
  for indicating the behaviour of a method or variable.

  Atomy's whitespace indentation rules are similar to Haskell's - they are
  not as strict as Python's, you just increase the spacing amount to indicate
  continuing the previous line, and continue that indentation amount to
  indicate continuing the current "block" of code.

  Using significant whitespace, this code:

  \atomy{
    \{ "hi" print
      goodbye
      2 + 2
    \} call
  }

  is equivalent to:

  \atomy{
    \{ "hi" print, goodbye, 2 + 2 \} call
  }

  With these simple line-continuing rules in place, you can spread a single
  chain of messages across multiple lines:

  \atomy{
    something
      foo
      sqrt
  }

  Which is parsed as:

  \atomy{something foo sqrt}

  The same rules apply to operators, which will skip any whitespace to get to
  the right-hand side of the expression.

  \atomy{
    foo =
      1 +
        2 *
          3
  }

  Which is parsed as:

  \atomy{foo = 1 + 2 * 3}

  Two spaces for indentation is recommended.
}

\section{Comments}{
  Atomy borrows its comment syntax from Haskell: \code{--} for line comments,
  and \code{\{- -\}} for block comments (which can be nested).

  \atomy{
    1 -- The number, "one."
    (\{- Blah blah blah, \{- yo dawg -\}, fizz buzz! -\} "foo") print
  }
  
  Additionally, Atomy will ignore a shebang at the very start of a file.
}

\section{Literals}{literals-syntax}{
  \definitions{
    \item{integers}{
      \hl{1}, \hl{-1}, \hl{0xdeadbeef}, \hl{0o644}, \hl{-0x10}, \hl{-0o10} ...
    }

    \item{floats}{
      \hl{1.0}, \hl{-1.5}, \hl{1.5e10}, \hl{1.4e-3}, \hl{-1.4e4}...
    }

    \item{strings}{
      \hl{""}, \hl{"foo"}, \hl{"fizz \\"buzz\\""}

      Escape codes supported (in addition to numeric escapes):

      \verbatim{
        ascii-2:
          \\b \\t \\n \\v \\f \\r \\SO \\SI \\EM \\FS \\GS \\RS \\US ‚ê£ (space)
          \\BS \\HT \\LF \\VT \\FF \\CR \\SO \\SI \\EM \\BS \\GS \\RS \\US \\SP

        ascii-3:
          \\NUL \\SOH \\STX \\ETX \\EOT \\ENQ \\ACK \\a \\DLE \\DC1 \\DC2
          \\DC3 \\DC4 \\NAK \\SYN \\ETB \\CAN \\SUB \\ESC \\DEL
      }
    }

    \item{lists}{\hl{[]}, \hl{[1]}, \hl{[1, .two, "three"]}, ...}

    \item{expressions}{
      \definitions{
        \item{quoted}{
          An apostrophe (\code{'}) before an expression "quotes" it,
          preventing evaluation and turning it into an expression literal:

          \example-segment{
            '1
            'a
            '(1 + 1)
            ''(1 + b)
            '\{ a = 1, a + 1 \}
          }
        }

        \item{quasiquoted}{
          Atomy supports quasiquotation as seen in most Lisps, most similarly
          Clojure. A backquote (\code{`}) begins a quasiquote, inside of
          which you can use tilde (\code{~}) to "unquote."

          These can be nested infinitely; unquoting works inside of aggregate
          expressions such as lists, blocks, and definitions.

          \example{
            `1
            `(1 + ~(2 + 2))
            ``(1 + ~~(2 + 2))
            `\{ a = ~(2 + 2) \}
            `[1, 2, ~(1 + 2)]
          }
        }
      }
    }

    \item{blocks}{
      Blocks come in two forms. One is a simple comma-delimited list of
      expressions wrapped in curly braces (\code{\{ \}}), and another form
      begins with a colon (\code{:}) and optionally ends with a semicolon
      (\code{;}).

      Block parsing is whitespace-aware; see \reference{General Rules}.

      \example{
        \{ 1 + 1 \}
        : 1 + 1 ;
        : foo
      }
    }
  }
}

\section{Expressions}{
  \definitions{
    \item{words}{
      \hl{foo}, \hl{_foo}, \hl{foo-bar}, ...

      Basic identifiers. They start with a lowercase letter or an underscore,
      followed by any number of letters, digits, underscores, or hyphens.

      \example{
        true
        nil
        _FILE
      }
    }

    \hl{constants}{
      \definitions{
        \item{\hl{Constant}}{
          \hl{Foo}, \hl{Bar}, ...

          Basic constant identifiers. They start with an uppercase letter,
          followed by any number of letters, digits, or underscores.

          \example{
            Kernel
            Atomy
          }
        }

        \item{\hl{ToplevelConstant}}{
          \hl{::Foo}, \hl{::Bar}, ...

          A constant indicating it should be accessed from the top scope.

          \example{
            ::Kernel
            ::Atomy
          }
        }

        \item{\hl{ScopedConstant}}{
          \hl{Foo::Bar}, \hl{foo::Bar}, \hl{foo(bar)::Baz}, ...

          A constant indicating it should be accessed from a certain value.

          \example{
            Atomy::Module
            ::Atomy::Module
          }
        }
      }
    }

    \item{calls}{
      \hl{foo()}, \hl{foo(1)}, \hl{foo(1, 2)}, \hl{"foo"(1, 2)}, \hl{2(3, 4)} ...

      A node, \code{name}, paired with a list of other nodes, the
      \hl{arguments}.

      \example{
        puts("foo")
      }
    }

    \item{composes}{
      \hl{x y}, \hl{foo bar(2, 3)}, ...

      Two nodes composed side-by-side.

      \example{
        1 class
      }
    }

    \item{prefix}{
      \hl{!foo}, \hl{$foo}, \hl{@foo}, ...

      A node prefixed by a single symbol.

      \example{
        @foo
        $stdin
      }
    }

    \item{postfix}{
      \hl{foo!}, \hl{foo?}, \hl{foo@}, ...

      A node punctuated by a single symbol at the end.

      \example{
        nil?
      }
    }

    \item{binary}{
      \hl{foo + bar}, \hl{fizz * buzz}, ...

      Two nodes separated by an operator.

      An operator can either by a string of one or more symbols, or a word
      defined to be an operator via \hl{infix}.

      Precedence and associativity can be set via \hl{infix}.

      \example{
        1 + 1
        1 is-in [0, 1, 1, 2, 3]
      }
    }
  }
}

\section{\hl{#language}}{
  You can tell the parser to switch to a different parser via \hl{#language
  foo}. This will change the grammar to use the \hl{Parser} defined in
  \hl{require("foo/language/parser")}.

  Anatomy use this for its document files, via \hl{#language anatomy}. You can
  change the parser at any time, even in the middle of a file. The result of
  the new parser is what the \hl{#language} node results in.
}
