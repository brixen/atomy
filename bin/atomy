#!/usr/bin/env rbx

base = File.expand_path "../../lib/", __FILE__
kernel = File.expand_path "../../kernel/", __FILE__

require 'readline'

require base + "/macros"
require base + "/method"
require base + "/util"
require base + "/namespace"
require base + "/compiler/compiler"
require base + "/compiler/stages"
require base + "/parser"
require base + "/patterns"
require base + "/code_loader"

bnd = TOPLEVEL_BINDING

def require_atomy(*as)
  Atomy::CodeLoader.load_file *as
end

a = Time.now
puts "loading kernel"
require_atomy(kernel + "/boot.ay")
puts Time.now - a

if ARGV[0]
  require_atomy(ARGV[0])
  exit(0)
end

if respond_to?(:"atomy/repl", true)
  Atomy::Namespace.ensure(:user).use(:atomy)

  send(:"atomy/repl", File.expand_path("~/.atomy_history"))
else
  HISTORY_FILE = File.expand_path("~/.atomy_history")

  if File.exists?(HISTORY_FILE)
    File.open(HISTORY_FILE, "r") do |f|
      f.readlines.each do |l|
        Readline::HISTORY << l.strip
      end
    end
  end

  begin
    SANE_HISTORY = []
    while str = Readline.readline("> ")
      next if str.empty?

      SANE_HISTORY << str

      begin
        res = Atomy::Compiler.evaluate str, bnd
        if res.respond_to?(:pretty)
          puts "=> #{res.pretty.render}"
        else
          puts "=> #{res.inspect}"
        end
      rescue StandardError => e
        puts "ERROR!"
        puts "#{e}:\n  #{e.message}"
        puts e.backtrace
      end
    end
  ensure
    File.open(HISTORY_FILE, "a") do |f|
      f.puts(*SANE_HISTORY)
    end
  end
end
