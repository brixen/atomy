#!/usr/bin/env rbx

base = File.expand_path "../../lib/atomo/", __FILE__
kernel = File.expand_path "../../kernel/", __FILE__

require 'readline'

require base + "/macros"
require base + "/method"
require base + "/compiler/compiler"
require base + "/compiler/stages"
require base + "/parser"
require base + "/code_loader"

bnd = TOPLEVEL_BINDING

Kernel.send(:define_method, :"load:") do |*as|
  Atomo::CodeLoader.load_file *as
end

a = Time.now
puts "loading kernel"
send(:"load:", kernel + "/boot.atomo")
puts Time.now - a

if ARGV[0]
  send(:"load:", ARGV[0])
  exit(0)
end

HISTORY_FILE = File.expand_path("~/.quanto_history")

if File.exists?(HISTORY_FILE)
  File.open(HISTORY_FILE, "r") do |f|
    f.readlines.each do |l|
      Readline::HISTORY << l.strip
    end
  end
end

SANE_HISTORY = []
while str = Readline.readline("> ")
  next if str.empty?

  SANE_HISTORY << str

  begin
    res = Atomo::Compiler.evaluate str, bnd
    puts "=> #{res.pretty.render}"
  rescue StandardError => e
    puts "ERROR!"
    puts "#{e}:\n  #{e.message}"
    puts e.backtrace
  end
end

File.open(HISTORY_FILE, "a") do |f|
  f.puts(*SANE_HISTORY)
end
