#!/usr/bin/env rbx

base = File.expand_path "../../lib/atomo/", __FILE__
kernel = File.expand_path "../../kernel/", __FILE__

require 'readline'

require base + '/macros'
require base + "/compiler/compiler"
require base + "/compiler/stages"
require base + '/parser'

bnd = binding()

Kernel.send(:define_method, :"load:") do |*as|
  cm = Atomo::Compiler.compile_file *as

  cm.create_script(false)

  MAIN.__send__ :__script__
end

a = Time.now
puts "loading kernel"
send(:"load:", kernel + "/boot.atomo")
puts Time.now - a

if ARGV[0]
  send(:"load:", ARGV[0], true)
  exit(0)
end

while str = Readline.readline("> ")
  next if str.empty?

  begin
    res = Atomo::Compiler.evaluate str, bnd
    puts "=> #{res.pretty.render}"
  rescue StandardError => e
    puts "ERROR!"
    puts "#{e}:\n  #{e.message}"
    puts e.backtrace
  end
end
