Atomy::DYNAMIC_ROOTS = Hash new

for-macro:
  class(<< self):
    key(n) :=
      Atomy::AST::Variable new(n line, "atomy_" + n name)

    dynvar(x) :=
      `(Thread current at(#~key(x)) || Atomy::DYNAMIC_ROOTS at(#~x))

    set-dynvar(n, v) :=
      `(Thread current at(#~key(n)) put(~v))

macro (dynamic(n, root))
  `(Atomy::DYNAMIC_ROOTS at(#~n) put(~root))

macro (^x) dynvar(x)

macro (let(*bindings, &body)) do:
  tmps = names(bindings size)
  save = []
  set = []
  restore = []

  bindings zip(tmps) ([`(~n = ~v), tmp]):
    save << `(~tmp = ~(dynvar(n)))
    set << set-dynvar(n, v)
    restore << set-dynvar(n, tmp)

  `(do:
      ~*save
      { ~*set
        ~*(body contents)
      } ensuring: ~*restore)
