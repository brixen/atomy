macro (x = y)
  Atomo::AST::Assign new(x, y);

macro (x match: (b: Block))
  { n = Atomo::AST::Match new(x, b);
    `({ ~n } call)
  } call;

macro ((x: BinarySend) := y)
  Atomo::AST::Define new(
    x operator,
    x lhs,
    [x rhs],
    y
  );

macro ((x: Variable) := y)
  Atomo::AST::Define new(
    x name,
    'self,
    [],
    y
  );

macro (x := y)
  Atomo::AST::Define new(
    x method_name,
    x receiver,
    x arguments,
    y
  );

macro (if: cond then: true else: false)
  Atomo::AST::IfThenElse new(cond, true, false);

macro (class(pair: BinarySend, &body))
  if: (pair lhs == 'self)
    then: { Atomo::AST::Metaclass new(pair rhs, body body) }
    else: { Atomo::AST::Class new(pair lhs, pair rhs, body body) };

macro (class(name, &body))
  Atomo::AST::Class new(name, nil, body body);

macro (module(name, &body))
  Atomo::AST::Module new(name, body body);

macro (x rescue: y)
  Atomo::AST::Catch new(x body, `(~y call($!)));

macro (x rescue: y else: z)
  Atomo::AST::Catch new(x body, `(~y call($!)), z body);

Block = Rubinius::BlockEnvironment;

x join: (b: Block) := b call_on_instance(x);

x do: (b: Block) :=
  { b call_on_instance(x);
    x
  } call