use("core")
use("define")
use("control-flow")
use("comparison")

define-class(nil, e: Atomy::AST::Constant) := `(~e = class:)
define-class(root, e: Atomy::AST::Constant) := `(~e = ~root class:)
define-class(root, `(~n { ~*cs })) :=
  define-class(root, `(~(n)() { ~*cs }))
define-class(root, x: `(~(name)(~*as))) :=
  define-class(root, `(~x {}))
define-class(root, `(~(name)(~*as): ~*cs)) := do:
  attrs = Array[]
  as each [a]:
    a through-quotes [x]:
      x match:
        `@~_ -> attrs << x

      x

  tmps = names(attrs size) collect [t]:
    Atomy::AST::Unquote new(0, t)

  pat = name
  attrs zip(tmps) [a, t]:
    pat =! `(~pat with(~a, ~t))

  cons = `(~(name)(~*tmps))

  pat-def =
    `(~(Atomy::AST::QuasiQuote new(0, cons)) to-pattern :=
        ~(Atomy::AST::QuasiQuote new(0, pat)) to-pattern)

  parent = root or 'Object

  `(do:
      ~name = ~parent class:
        attr-accessor(
          ~*(attrs collect [a]:
              `.~(a receiver)))

        initialize(~*as) := nil

      ~pat-def

      ~*(cs collect [c]: define-class(name, c)))

macro(data ~(children: Block)):
  `(data(Object) ~children)

macro(data(~root)):
  `(data(~root) {})

macro(data(~(root = 'Object)) ~(children: Block)):
  `(do:
      ~(define-class(nil, `(~(root) ~children)))
      nil)
