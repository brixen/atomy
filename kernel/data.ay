macro(&x):
  Atomy::AST::BlockPass new(x line, x)

macro(*x):
  Atomy::AST::Splat new(x line, x)

macro(@(x: Variable)):
  Atomy::AST::InstanceVariable new(x line, x name)

macro(@@(x: Variable)):
  Atomy::AST::ClassVariable new(x line, x name)

macro($'exception):
  Atomy::AST::GlobalVariable new(line, "!")

macro($'path):
  Atomy::AST::GlobalVariable new(line, ":")

macro($(x: Constant)):
  Atomy::AST::GlobalVariable new(x line, x identifier)

macro($(x: Variable)):
  Atomy::AST::GlobalVariable new(x line, x name)

macro(#(x: Constant)):
  Atomy::AST::Particle new(x line, x identifier)

macro(#(x: Variable)):
  Atomy::AST::Particle new(x line, x name)

macro(a .. b): `(Range new(~a, ~b))
macro(a ... b): `(Range new(~a, ~b, true))

macro(x at(y) put(z)):
  Atomy::AST::Send new(
    line
    x
    [y, z]
    "[]="
  )

macro(x for(e) in(c)): `(~c collect (~e): ~x)

macro(x for(e) in(c) if(t)):
  names (tmp):
    `([] tap (~tmp):
        ~c each (~e):
          when(~t):
            ~tmp << ~x)

class(Object):
  dynamic-method(#at) (g):
    g total-args = 0
    g required-args = 0
    g local-count = 1
    g splat-index = 0

    g push-self
    g push-local(0)
    g cast-array
    g push-block
    g send-with-splat("[]" to-sym, 0)
    g ret
