use("core")
use("define")
use("control-flow")

infix("for in when", 30, .right)
infix("is-in", 60)
infix(".", 60, .right)

macro(~x for ~arg in ~c):
  `(~x for(~arg) in(~c))

macro(~x for ~arg in ~c when ~t):
  `(~x for(~arg) in(~c) when(~t))

macro(~x for(~*args) in(~c)):
  `(~c collect [~*args]: ~x)

macro(~x for(~*args) in(~c) when(~t)):
  names [tmp]:
    `(do:
        ~tmp = []
        ~c collect [~*args]:
          when(~t):
            ~tmp << ~x

        ~tmp)

a is-in b := b include(a)?

Array inject-right(i = undefined) &block :=
  reverse inject(i) [x, y]: block [y, x]

macro(~a . ~b): `([~a] + ~b)
