module(Atomo::Patterns) {
  data(Pattern) {
    Strict(@body)
    RuntimeClass(@body, @id)
    Predicate(@pattern, @test)
  }

  class(Strict) {
    construct(g) :=
      { get(g)
        @body construct(g)
        g send(#new, 1)
      } call

    == b :=
      b kind_of?(Strict) && @body == b body

    target(g) :=
      @body bytecode(g)

    matches?(g) :=
      { @body bytecode(g)
        g send(#==, 1)
      } call
  }

  class(RuntimeClass) {
    construct(g) :=
      { get(g)
        @body construct(g)
        @body bytecode(g)
        g send(#object_id, 0)
        g send(#new, 2)
      } call

    == b :=
      b kind_of?(Class) &&
        @body == b body &&
        @id == b id

    target(g) :=
      @body bytecode(g)

    matches?(g) :=
      { g send(#class, 0)
        g send(#object_id, 0)
        g push_int(@id)
        g send(#==, 1)
      } call
  }

  class(Predicate) {
    construct(g) :=
      { get(g)
        @pattern construct(g)
        @test construct(g)
        g send(#new, 2)
      } call

    == b :=
      b kind_of?(Predicate) &&
        @pattern == b pattern &&
        @test == b test

    target(g) :=
      if: @pattern
        then: { Any new target(g) }
        else: { @pattern target(g) }

    matches?(g) :=
      { mismatch = g new_label
        done = g new_label

        g dup
        @pattern matches?(g)
        g gif(mismatch)

        `{ ~@test } bytecode(g)
        g swap
        g send(#call_on_instance, 1)
        g goto(done)

        mismatch set!
        g pop
        g push_false

        done set!
      } call
  }
}
