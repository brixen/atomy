macro(for-macro ~(b: Block)):
  `(module(Atomy::Macro::Helpers):
      ~*(b contents))

macro(when-compiling ~(b: Block)):
  b body evaluate
  'nil

macro(let-macro(~*ms) ~(b: Block)):
  tripled = ms zip(names(ms size) zip(names(ms size)))

  define =
    tripled collect [[`(~p = ~b), [let, mac]]]:
      `(do:
          Atomy::STATE [#~mac] = ~mac = '(macro(~p): ~b)

          Atomy::STATE [#~let] =
            Atomy::Macro register(
              ~mac pattern class
              ~mac pattern macro-pattern
              ~mac body
              Atomy::CodeLoader compiling
              true
            ))

  unwind =
    tripled collect [[_, [let, mac]]]:
      `(do:
          ~mac = Atomy::STATE [#~mac] pattern

          ~mac class remove-method(Atomy::STATE [#~let])

          when(lets = Atomy::Macro::Environment let [~mac class]):
            lets delete(Atomy::STATE [#~let])

            when(lets empty?):
              Atomy::Macro::Environment let delete(~mac class))

  names [res]:
    `(do:
        when-compiling:
          ~*define

        ~res = ~(b body)

        when-compiling:
          ~*unwind

        ~res)
