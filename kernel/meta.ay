use("core")
use("define")
use("control-flow")
use("node")

macro(when-compiling ~(b: Block)):
  b body evaluate(Atomy CodeLoader module compile-context)
  'nil

Atomy AST open:
  ast(LetMacro(.body, [.macros]))

  LetMacro bytecode(g) := do:
    mod = Atomy make-wrapper-module
    mod delegate = Atomy CodeLoader module
    mod file = mod delegate file

    before-mod = Atomy CodeLoader module

    mod send(.include, before-mod)
    mod extend(before-mod)
    mod using << before-mod

    { Atomy CodeLoader module = mod

      @macros each [`(~pat = ~exp)]:
        mod define-macro(pat, exp)

      body compile(g)
    } ensuring:
      Atomy CodeLoader module = before-mod

macro(let-macro(~*ms) ~(b: Block)):
  LetMacro new(node line, b body, ms)
