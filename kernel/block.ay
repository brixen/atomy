use("core")
use("define")
use("comparison")
use("control-flow")
use("meta")
use("interpolation")
use("node")

Atomy Patterns open:
  NamedRedirectedInstance = NamedInstance class:
    attributes(.target, .identifier)
    generate

    construct(g) := do:
      get(g)
      @target construct(g)
      g push-literal(@identifier)
      g send(.new, 2)

    deconstruct(g, locals = {}) := do:
      @target compile(g)
      g swap
      g push-literal(name)
      g swap
      g send(.instance-variable-set, 2)
      g pop

  NamedRedirectedClass = NamedClass class:
    attributes(.target, .identifier)
    generate

    construct(g) := do:
      get(g)
      @target construct(g)
      g push-literal(@identifier)
      g send(.new, 2)

    deconstruct(g, locals = {}) := do:
      have-class = g new-label

      @target compile(g)
      g dup
      g push-cpath-top
      g find-const(.Class)
      g kind-of
      g git(have-class)

      g send(.class, 0)

      have-class set!
      g swap
      g push-literal(name)
      g swap
      g send(.class-variable-set, 2)
      g pop


Atomy AST open:
  ast:
    RedirectedInstanceVariable(.target, @name)
    RedirectedClassVariable(.target, @name)


  RedirectedInstanceVariable bytecode(g) := do:
    pos(g)
    @target compile(g)
    g push-literal(."@#{@name}")
    g send(.instance-variable-get, 1)

  RedirectedClassVariable bytecode(g) := do:
    pos(g)
    have-class = g new-label

    @target compile(g)
    g dup
    g push-cpath-top
    g find-const(.Class)
    g kind-of
    g git(have-class)

    g send(.class, 0)

    have-class set!
    g push-literal(."@@#{@name}")
    g send(.class-variable-get, 1)


  RedirectedInstanceVariable to-pattern :=
    Atomy Patterns NamedRedirectedInstance new(@target, @name)

  RedirectedClassVariable to-pattern :=
    Atomy Patterns NamedRedirectedClass new(@target, @name)


macro(~x onto ~(b: Block)):
  names [val]:
    `(do:
        ~val = self
        let-macro(self = '~val):
          { with-variables-of(~val) ~b
          } block call-on-instance(~x))


macro(with-variables-of(~x) ~(b: Block)):
  names [val]:
    body = b contents collect [c]:
      c through-quotes([n]: n match: `@@~_ -> true) [n]:
        n match:
          `@@~(name: ? to-word) ->
            RedirectedClassVariable new(n line, val, name to-word text)

          `@~(name: ? to-word) ->
            RedirectedInstanceVariable new(n line, val, name to-word text)

          _ -> n

    `(do: ~val = ~x, ~*body)
