macro (&x)
  Atomo::AST::BlockPass new(x line, x)

macro (*x)
  Atomo::AST::Splat new(x line, x)

macro (@(x: Variable))
  Atomo::AST::InstanceVariable new(x line, x name)

macro (@@(x: Variable))
  Atomo::AST::ClassVariable new(x line, x name)

macro ($'exception)
  Atomo::AST::GlobalVariable new(line, "!")

macro ($'path)
  Atomo::AST::GlobalVariable new(line, ":")

macro ($(x: Constant))
  Atomo::AST::GlobalVariable new(x line, x identifier)

macro ($(x: Variable))
  Atomo::AST::GlobalVariable new(x line, x name)

macro (#(x: Constant))
  Atomo::AST::Particle new(x line, x identifier)

macro (#(x: Variable))
  Atomo::AST::Particle new(x line, x name)

macro (a .. b) `(Range new(~a, ~b))
macro (a ... b) `(Range new(~a, ~b, true))

macro (x at(y) put(z))
  Atomo::AST::Send new(
    line
    x
    [y, z]
    "[]="
  )

for-macro quoter(#w) (c): c split

-- TODO: flags
for-macro quoter(#r) (c): `(Regexp new(~c))

for-macro quoter(#raw) (c): c
