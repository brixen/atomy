macro (&x)
  Atomo::AST::BlockPass new(x line, x)

macro (*x)
  Atomo::AST::Splat new(x line, x)

macro (#(p: Primitive)) -- #true, #false, #self, etc.
  Atomo::AST::Particle new(line, p value to_s)

macro (#(x: Variable))
  Atomo::AST::Particle new(line, x name)

macro (@(x: Variable))
  Atomo::AST::InstanceVariable new(x line, x name)

macro (@@(x: Variable))
  Atomo::AST::ClassVariable new(x line, x name)

macro ($(x: 'exception))
  Atomo::AST::GlobalVariable new(x line, "!")

macro ($(x: Variable))
  Atomo::AST::GlobalVariable new(x line, x name)

macro (class(`(<< ~obj), &body))
  Atomo::AST::Metaclass new(obj line, obj, body body)

macro (class(`(~name < ~super), &body))
  Atomo::AST::Class new(name line, name, body body, super)

macro (class(name, &body))
  Atomo::AST::Class new(name line, name, body body)

macro (module(name, &body))
  Atomo::AST::Module new(name line, name, body body)

macro (data(root, &children))
  { cs = children contents map { e |
      e match: {
        Atomo::AST::UnarySend ->
          { init =
              Atomo::AST::UnarySend new(
                0
                Atomo::AST::Primitive new(0, #self)
                e arguments
                "initialize"
              )

            accessors =
              Atomo::AST::UnarySend new(
                0
                Atomo::AST::Primitive new(0, #self)
                e arguments map { a |
                  name = a receiver name to_s
                  Atomo::AST::Particle new(0, name)
                }
                "attr_accessor"
              )

            name =
              Atomo::AST::Constant new(0, e method_name)

            `(class(~name < ~root) {
                ~accessors
                ~init := #ok
              })
          } call

        Atomo::AST::Constant ->
          `(class(~e < ~root) {})

        Atomo::AST::ScopedConstant ->
          `(class(~e < ~root) {})

        Atomo::AST::ToplevelConstant ->
          `(class(~e < ~root) {})

        _ -> raise("unknown module name: " + e to_s)
      }
    }

    decls = Atomo::AST::Block new(
      root line
      [`(class(~root) {})] + cs
      []
    )

    `(~decls call)
  } call

a .. b := Range new(a, b)
a ... b := Range new(a, b, true)

for-macro quote: #w as: { c | c split }

-- TODO: flags
for-macro quote: #r as: { c | Regexp new(c) }

for-macro quote: #raw as: { c | c }
