infix("=", 10, "right")
infix("?", 30, "right")

-- a few macros so we can actually, you know, send messages
define-macro('(~_ ~(? to-word)), 'make-send(node))
define-macro('(~_ ~(? to-word)(~*_)), 'make-send(node))

-- a macro for defining macros!
define-macro(
  '(macro(~pat) ~(body: Block))
  '(Macro new(node line, pat, body body)))

-- pseudo-variables
macro(nil): Primitive new(node line, "nil" to-sym)
macro(self): Primitive new(node line, "self" to-sym)
macro(true): Primitive new(node line, "true" to-sym)
macro(false): Primitive new(node line, "false" to-sym)
macro(undefined): Primitive new(node line, "undefined" to-sym)

-- assignment/pattern-matching
macro(~x = ~y): Assign new(node line, x to-pattern to-node, y)

-- [x, y] { x + y }
macro([~*args] ~(b: Block)):
  b arguments = args
  b

-- [x, y] &z { x + y }
macro([~*args] &~blk ~(b: Block)):
  b arguments = args
  b block = blk
  b

-- &z { x + y }
macro(&~blk ~(b: Block)):
  b block = blk
  b

-- foo { bar }
macro(~(w: ? to-word) ~(b: Block)):
  x = w to-send
  x block = b
  x

-- foo(a) { bar }
macro(~(? to-word)(~*_) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- x foo { bar }
macro(~_ ~(? to-word) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- x foo(a) { bar }
macro(~_ ~(? to-word)(~*_) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- collect [x] { x + 1 }
macro(~(? to-word) [~*ys] ~(z: Block)):
  z arguments = ys
  x = node left left to-send
  x block = z
  x

-- collect(a) [x] { x + 1 }
macro(~(call: `(~(? to-word)(~*_))) [~*ys] ~(z: Block)):
  z arguments = ys
  x = call to-send
  x block = z
  x

-- [1, 2, 3] collect [x] { x + 1 }
macro(~(call: `(~_ ~(? to-word))) [~*ys] ~(z: Block)):
  z arguments = ys
  x = call to-send
  x block = z
  x

-- [1, 2, 3] collect(a) [x] { x + 1 }
macro(~(call: `(~_ ~(? to-word)(~*_))) [~*ys] ~(z: Block)):
  z arguments = ys
  x = call to-send
  x block = z
  x

-- particle/symbol block-passing shorthand
macro(~x .~y): `(~x &.~y)

-- block-passing
macro(~_ ~(? to-word) &~_):
  node left to-send tap [s]:
    s block = node right

macro(~(? to-word)(~*_) &~_):
  node left to-send tap [x]:
    x block = node right

macro(~_ ~(? to-word)(~*_) &~_):
  node left to-send tap [s]:
    s block = node right

-- foo [bar, ...]
macro(~x [~*ys]): node to-send

-- foo [bar, ...] &baz
macro(~x [~*ys] &~x):
  node left to-send tap [s]:
    s block = node right

-- [bar, ...] &baz
macro([~*_] &~_):
  `(self ~(node left)) to-send tap [s]:
    s private = true
    s block = node right

-- Foo(...)
macro(~(c: Constant)(~*args)):
  node to-send tap [x]:
    x message-name = c name

-- Foo(...) &baz
macro(~(c: Constant)(~*args) &~_):
  node left to-send tap [x]:
    x message-name = c name
    x block = node right

-- Bar::Foo(...)
macro(~(c: ScopedConstant)(~*args)):
  node to-send tap [x]:
    x receiver = c parent
    x message-name = c name

-- Bar::Foo(...) &baz
macro(~(c: ScopedConstant)(~*args) &~_):
  node left to-send tap [x]:
    x receiver = c parent
    x message-name = c name
    x block = node right

macro(_LINE): node line
macro(_FILE): File new(node line)

macro(&~x):
  BlockPass new(node line, x)

macro(*~x):
  Splat new(node line, x)

macro(@~(x: ? to-word)):
  InstanceVariable new(node line, x to-word text)

macro(@@~(x: ? to-word)):
  ClassVariable new(node line, x to-word text)

macro($0):
  GlobalVariable new(node line, "0" to-sym)

macro($~(x: String)):
  GlobalVariable new(node line, x value)

macro($~(x: Constant)):
  GlobalVariable new(node line, x name)

macro($~(x: ? to-word)):
  GlobalVariable new(node line, x to-word text)

macro($exception):
  GlobalVariable new(node line, "!" to-sym)

macro($path):
  GlobalVariable new(node line, ":" to-sym)

macro($separator):
  GlobalVariable new(node line, "/" to-sym)

macro(.~(x: Constant)):
  Literal new(node line, x name)

macro(.~(x: ? to-word)):
  Literal new(node line, x to-word text)

macro(.~(x: String)):
  Literal new(node line, x value to-sym)

macro(.[]): ."[]"
macro(.[]=): ."[]="

-- bar?
macro((~Word)?):
  node receiver tap [r]:
    r text = (r text to-s + "?") to-sym

-- x bar?
macro(~x (~Word)?):
  node right =
    node right receiver tap [r]:
      r text = (r text to-s + "?") to-sym

  node

-- bar(...)?
macro(~(Word)(~*args)?):
  node receiver tap [r]:
    r name text = (r name text to-s + "?") to-sym

-- foo bar(...)?
macro(~x ~(Word)(~*args)?):
  node right =
    node right receiver tap [r]:
      r name text = (r name text to-s + "?") to-sym

  node

-- bar!
macro((~Word)!):
  node receiver tap [r]:
    r text = (r text to-s + "!") to-sym

-- x bar!
macro(~x (~Word)!):
  node right =
    node right receiver tap [r]:
      r text = (r text to-s + "!") to-sym

  node

-- bar(...)!
macro(~(Word)(~*args)!):
  node receiver tap [r]:
    r name text = (r name text to-s + "!") to-sym

-- foo bar(...)!
macro(~x ~(Word)(~*args)!):
  node right =
    node right receiver tap [r]:
      r name text = (r name text to-s + "!") to-sym

  node

use("operators")
