class(And < Atomo::AST::Node) {
  children(#a, #b)
  generate

  bytecode(g) :=
    { pos(g)
      done = g new_label
      no = g new_label

      @a bytecode(g)
      g gif(no)

      @b bytecode(g)
      g goto(done)

      no set!
      g push_false

      done set!
    } call
}

class(Or < Atomo::AST::Node) {
  children(#a, #b)
  generate

  bytecode(g) :=
    { pos(g)
      done = g new_label
      yes = g new_label

      @a bytecode(g)
      g git(yes)

      @b bytecode(g)
      g goto(done)

      yes set!
      g push_true

      done set!
    } call
}

class(Negate < Atomo::AST::Node) {
  children(#expression)
  generate

  bytecode(g) :=
    { pos(g)
      done = g new_label
      yes = g new_label

      @expression bytecode(g)
      g git(yes)

      g push_true
      g goto(done)

      yes set!
      g push_false

      done set!
    } call
}

macro (a && b) And new(a line, a, b)
macro (a || b) Or new(a line, a, b)
macro (!a) Negate new(a line, a)
macro (a != b) `!(~a == ~b)
macro (a !~ b) `!(~a =~ ~b)
