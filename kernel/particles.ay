for-macro:
  wildcard('_) := '_undefined
  wildcard(x) := x

macro(#(~(x)(~*as))):
  `(Particle [
      _undefined
      #~x
      ~*(as collect [c]: wildcard(c))
    ])

macro(#(~r ~(x)(~*as))):
  `(Particle [
      ~(wildcard(r))
      #~x
      ~*(as collect [c]: wildcard(c))
    ])

macro(#(~r [~*as])):
  `(Particle [
      ~(wildcard(r))
      #"[]"
      ~*(as collect [c]: wildcard(c))
    ])

macro(#~(x: Binary)):
  `(Particle [
      ~(if(x private)
          then: '_undefined
          else: wildcard(x lhs))
      #~(x operator)
      ~(wildcard(x rhs))
    ])

`#(~r [~*as]) pattern :=
  Atomy::Patterns::List new $:
    [ r pattern
      `#"[]" pattern
    ] + as collect(&#pattern)

`#~(x: Atomy::AST::Binary) pattern :=
  Atomy::Patterns::List new $:
    [ if(x private)
        then: '_ pattern
        else: x lhs pattern
      `#~(x operator) pattern
      x rhs pattern
    ]

`#(~(x)(~*as)) pattern :=
  Atomy::Patterns::List new $:
    [ '_ pattern
      `#~x pattern
    ] + as collect(&#pattern)

`#(~r ~(x)(~*as)) pattern :=
  Atomy::Patterns::List new $:
    [ r pattern
      `#~x pattern
    ] + as collect(&#pattern)

class(Particle < Array):
  call(*args) := to-proc [*args]

  to-proc := [*args]:
    x = dup

    args each [a]:
      idx = x find-index [a]:
        a equal?(_undefined)

      when(idx):
        x [idx] = a

    x first send(*(x drop(1)))

  arity :=
    select(&#equal?(_undefined)) size

  receiver := at(0)

  message := at(1)

  arguments := drop(2)

class(Symbol):
  call(*args) := to-proc [*args]

  arity := 1
