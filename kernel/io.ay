use("core")
use("define")
use("control-flow")

use("dynamic")

OutputPort = dynamic($stdout)
InputPort = dynamic($stdin)
ErrorPort = dynamic($stderr)

x println := x tap: ^OutputPort puts(x to-s)
x dump := x tap: ^OutputPort print(x to-s)
x write := x tap: ^OutputPort puts(x show)

export

with-output-to((filename: String), mode = "w") &action :=
  let(OutputPort = File open(filename, mode)):
    action ensuring:
      ^OutputPort close

with-output-to(io) &action :=
  let(OutputPort = io):
    action call

with-error-to((filename: String), mode = "w") &action :=
  let(ErrorPort = File open(filename, mode)):
    action ensuring:
      ^ErrorPort close

with-error-to(io) &action :=
  let(ErrorPort = io):
    action call


read-line(sep = $separator) := do:
  x = ^InputPort gets(sep)

  unless(x):
    error(EndOfFile new(^InputPort))

  x

read-lines(sep = $separator) := do:
  x = ^InputPort readlines(sep)

  unless(x):
    error(EndOfFile new(^InputPort))

  x

read-byte := do:
  x = ^InputPort getc

  unless(x):
    error(EndOfFile new(^InputPort))

  x

read-char := read-byte chr

read(length = nil, buffer = nil) :=
  ^InputPort send(#read, length, buffer)

with-input-from((filename: String), mode = "r") &action :=
  let(InputPort = File open(filename, mode)):
    action ensuring:
      ^InputPort close

with-input-from(io) &action :=
  let(InputPort = io):
    action call
