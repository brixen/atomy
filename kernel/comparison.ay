-- TODO: merge w/ control-flow
use("core")
use("define")
use("node")

Atomy::AST open:
  ast:
    And(#a, #b)
    Or(#a, #b)
    Negate(#expression)

  And bytecode(g) := do:
    pos(g)
    done = g new-label
    no = g new-label

    @a compile(g)
    g dup
    g gif(done)

    g pop
    @b compile(g)

    done set!

  Or bytecode(g) := do:
    pos(g)
    done = g new-label

    @a compile(g)
    g dup
    g git(done)

    g pop
    @b compile(g)

    done set!

  Negate bytecode(g) := do:
    pos(g)
    done = g new-label
    yes = g new-label

    @expression compile(g)
    g git(yes)

    g push-true
    g goto(done)

    yes set!
    g push-false

    done set!

macro(~a && ~b): And new(node line, a, b)
macro(~a || ~b): Or new(node line, a, b)
macro(!~a): Negate new(node line, a)
macro(~a != ~b): `!(~a == ~b)
macro(~a !~ ~b): `!(~a =~ ~b)
macro(~x ||= ~y): `(~x =! (~x || ~y))
macro(~x &&= ~y): `(~x =! (~x && ~y))
