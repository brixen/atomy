-- TODO: merge w/ control-flow
use("core")
use("define")
use("node")

infix("<=> < <= >= >", 60)
infix("== !=", 50)
infix("&& and", 40)
infix("|| or", 30)
infix("not", 45, .right)

Atomy AST open:
  ast:
    And(.a, .b)
    Or(.a, .b)
    Negate(.expression)

  And bytecode(g, mod) := do:
    pos(g)
    done = g new-label
    no = g new-label

    mod compile(g, @a)
    g dup
    g gif(done)

    g pop
    mod compile(g, @b)

    done set!

  Or bytecode(g, mod) := do:
    pos(g)
    done = g new-label

    mod compile(g, @a)
    g dup
    g git(done)

    g pop
    mod compile(g, @b)

    done set!

  Negate bytecode(g, mod) := do:
    pos(g)
    done = g new-label
    yes = g new-label

    mod compile(g, @expression)
    g git(yes)

    g push-true
    g goto(done)

    yes set!
    g push-false

    done set!

macro(~a and ~b): And new(node line, a, b)
macro(~a && ~b): And new(node line, a, b)

macro(~a or ~b): Or new(node line, a, b)
macro(~a || ~b): Or new(node line, a, b)

macro(not ~a): Negate new(node line, a)
macro(!~a): Negate new(node line, a)

macro(~a != ~b): `!(~a == ~b)
macro(~a !~ ~b): `!(~a =~ ~b)
macro(~x ||= ~y): `(~x =! (~x || ~y))
macro(~x &&= ~y): `(~x =! (~x && ~y))
