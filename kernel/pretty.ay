dynamic(atomy-pretty-multiline?, false)
dynamic(atomy-pretty-context, #top)
dynamic(atomy-pretty-colored?, false)

ident(n) := Atomy::Pretty::Text new(n [0, 1] + n [1 .. -1] tr("_", "-") gsub("_ns_", "/"))

pretty-body([]) := []
pretty-body([x]) := [from(#top): x pretty]
pretty-body(x . xs) := [from(#list) { x pretty }] + pretty-body(xs)

_ unamb := pretty

from(*where, &y) :=
  let(atomy-pretty-context = where flatten) { y call }

from?(*where) :=
  [^atomy-pretty-context, where] match:
    [(a: List), (b: List)] ->
      a any? [x]: b include?(x)
    [(a: List), b] ->
      a include?(b)
    [a, (b: List)] ->
      b include?(a)
    [a, b] ->
      a == b

List all-pretty := collect [x]: x pretty

Atomy::Pretty::Doc colored(color) := doc:
  -- only makes sense to colorize if we're outputting to a terminal
  unless(^atomy-pretty-colored? && ^output-port tty?):
    return(self)

  codes =
    [ #black
      #red
      #green
      #yellow
      #blue
      #magenta
      #cyan
      #white
    ] to-a zip((0 .. 7) to-a)

  hash = Hash [codes]

  raw("\e[9" + hash [color] to-s + "m") <> self <> raw("\e[0m")

String pretty := doc: text(inspect gsub("\\#", "#")) colored(#yellow)

Integer pretty := super colored(#blue)
Float pretty := super colored(#blue)
TrueClass pretty := super colored(#green)
FalseClass pretty := super colored(#red)
NilClass pretty := super colored(#black)
Object pretty := Atomy::Pretty::Text new(inspect)

Object show := pretty flatten render

Atomy::Pretty::Doc pretty := self

List pretty := doc: list(all-pretty)

Array pretty := doc: text("Array") <> list(collect [x]: x pretty)

Atomy::Particle pretty := doc:
  wildcard = [c]:
    if(c equal?(_undefined))
      then: '_
      else: c

  operator? = @message to-s !~ r"^[a-z_]"

  args = @arguments collect(&#(wildcard [_]))

  msg+args =
    if(operator?)
      then:
        text(@message to-s) <+> args first unamb
      else:
        ident(@message to-s) <>
          tupled(args all-pretty)

  partial =
    if(@receiver equal?(_undefined))
      then:
        if(operator?)
          then: parens(msg+args)
          else: msg+args
      else: parens(@receiver unamb <+> msg+args)

  text("#") <> partial

Atomy::Particle to-s := show

Symbol pretty := doc:
  s = to-s
  if(s =~ r"^[\p{Ll}_]([\p{L}\d\p{S}!@#%&*\-_\\.\/\?])*$"(u))
    then: text("#") <> ident(s)
    else: text("#") <> s pretty

Hash pretty := doc:
  text("!#") <>
    brackets $:
      comma separate $:
        to-a collect [[k, v]]:
          k unamb <+> text("->") <+> v unamb

Atomy::Map pretty := doc:
  text("#") <>
    brackets $:
      comma separate $:
        reduce([]) [a, k, v]:
          a + [k unamb <+> text("->") <+> v unamb]

module(Atomy::AST):
  Block unamb := pretty
  ClassVariable unamb := pretty
  Call unamb := pretty
  Compose unamb := doc:
    if(from?(#binary, #compose))
      then: pretty
      else: parens(pretty)
  Constant unamb := pretty
  GlobalVariable unamb := pretty
  (Tree ? @nodes size < 2) unamb := pretty
  InstanceVariable unamb := pretty
  List unamb := pretty
  Primitive unamb := pretty
  QuasiQuote unamb := pretty
  Quote unamb := pretty
  ScopedConstant unamb := pretty
  Send unamb := doc:
    if(from?(#binary, #compose))
      then: pretty
      else: parens(pretty)
  Splice unamb := pretty
  String unamb := pretty
  ToplevelConstant unamb := pretty
  Unary unamb := pretty
  Unquote unamb := pretty
  Word unamb := pretty
  Pattern unamb := @pattern unamb
  Node unamb := doc: parens(pretty)
  _ unamb := pretty

  Binary pretty := doc:
    from(#binary):
      ((@lhs unamb <+> text(@operator)) </> @rhs unamb) hang(2)

  Block pretty := doc:
    args =
      if(@arguments empty?)
        then: empty
        else: list(@arguments all-pretty)

    contents = comma separate(pretty-body(@contents))

    if(from?(#send-block) && from?(#top))
      then: args <> colon <+> contents
      else: align(args <+> (lbrace </> contents) nest(2) </> rbrace)

  Call pretty := doc: @name pretty <> tupled(@arguments all-pretty)

  Compose pretty := @left pretty <+> @right pretty

  Constant pretty := doc: text(@identifier)

  Infix pretty := doc:
    hsep([
      text(".infix")
      text(@associativity to-s)
      @precedence pretty
      hsep(@operators map [o] { text(o) })
    ])

  List pretty := doc:
    from(#list):
      list(@elements all-pretty)

  Literal pretty := @value pretty

  Macro pretty := doc:
    text("macro") <+> parens(@pattern pretty) <+> @body pretty

  Primitive pretty := doc:
    @value match:
      #self -> text("self")
      #true -> text("true")
      #false -> text("false")
      #nil -> text("nil")
      x -> text(x inspect)

  QuasiQuote pretty := doc:
    from(#unary):
      text("`") <> @expression unamb

  Quote pretty := doc:
    from(#unary):
      text("'") <> @expression unamb

  ScopedConstant pretty := doc:
    from(#scoped-constant):
      @parent unamb <> text("::") <> text(@identifier)

  Splice pretty := doc:
    from(#unary):
      text("~*") <> @expression unamb

  String pretty := doc: text(@value inspect gsub("\\#", "#"))

  ToplevelConstant pretty := doc: text("::") <> text(@identifier)

  Unary pretty := doc:
    from(#unary):
      text(@operator) <> @receiver unamb

  Unquote pretty := doc:
    from(#unary):
      text("~") <> @expression unamb

  Word pretty := ident(@text)

  Tree pretty := doc:
    if(^atomy-pretty-multiline?)
      then: from(#top): vcat(@nodes all-pretty)
      else: from(#list): comma separate(@nodes all-pretty)

  Pattern pretty := @pattern pretty


module(Atomy::Patterns):
  And pretty := `(~@a & ~@b) pretty
  Any pretty := doc: text("_")
  Attribute pretty := `(~@receiver ~(Atomy::AST::Word new(-1, @name))) pretty
  BlockPass pretty := `&~@pattern pretty
  Constant pretty := @constant pretty
  Default pretty := `(~@pattern = ~@default) pretty
  HeadTail pretty := `(~@head . ~@tail) pretty
  List pretty := `[~*(@patterns collect(&#to-node))] pretty
  Literal pretty := @value pretty
  Match pretty := @value pretty
  Named pretty := doc:
    if(@pattern is-a?(Any))
      then: text(@name)
      else: text(@name) <> text(":") <+> @pattern pretty
  NamedClass pretty :=
    `(@@~(Atomy::AST::Word new(-1, @identifier))) pretty
  NamedInstance pretty :=
    `(@~(Atomy::AST::Word new(-1, @identifier))) pretty
  NamedGlobal pretty :=
    `($~(Atomy::AST::Word new(-1, @identifier))) pretty
  Or pretty := `(~@a | ~@b) pretty
  Particle pretty :=
    Atomy::Particle new(
      @receiver
      @message
      @arguments patterns to-list
    ) pretty
  Predicate pretty := `(~@pattern ? ~@test) pretty
  QuasiQuote pretty := @quoted pretty
  Quote pretty := `'~@expression pretty
  RuntimeClass pretty := `%~@body pretty
  SingletonClass pretty := @body pretty
  Splat pretty := `*~@pattern pretty
  With pretty := `(~@pattern with(~@expression, ~@sub-pattern)) pretty

  And unamb := doc: parens(pretty)
  Attribute unamb := doc: parens(pretty)
  Default unamb := doc: parens(pretty)
  HeadTail unamb := doc: parens(pretty)
  Named unamb :=
    if(@pattern is-a?(Any))
      then: pretty
      else: doc: parens(pretty)
  Or unamb := doc: parens(pretty)
  Predicate unamb := doc: parens(pretty)
  With unamb := doc: parens(pretty)
