use("core")
use("define")
use("control-flow")
use("cosmetics")
use("particles")
use("comparison")
use("range")
use("regexp")
use("array")
use("undefined")

use("dynamic")
use("doc")

IO = use("io")

Printing = dynamic([])
Multiline = dynamic(false)
Context = dynamic(.top)
Colored = dynamic(false)

ident(n) := text(n [0, 1] + n [1 .. -1] tr("_", "-") gsub("_ns_", "/"))

pretty-sequence([]) := []
pretty-sequence([x]) := [from(.top): x pretty]
pretty-sequence(x . xs) := [from(.list) { x pretty }] + pretty-sequence(xs)

tree(xs) := align(fill-sep(comma punctuate(xs)))

_ unamb := pretty

from(*where) &y :=
  let(Context = where flatten):
    y call

from(*where)? :=
  [^Context, where] match:
    [(a: Array), (b: Array)] ->
      a any? [x]: b include(x)?
    [(a: Array), b] ->
      a include(b)?
    [a, (b: Array)] ->
      b include(a)?
    [a, b] ->
      a == b

Object pretty :=
  if(^Printing member(self)?)
    then: text("...")
    else:
      let(Printing = self . ^Printing):
        pretty-print

Object show :=
  let(Colored = false):
    pretty flatten render

Doc colored(color) := do:
  -- only makes sense to colorize if we're outputting to a terminal
  unless(^Colored && ^IO::OutputPort tty?):
    return(self)

  codes =
    [ .black
      .red
      .green
      .yellow
      .blue
      .magenta
      .cyan
      .white
    ] to-a zip((0 .. 7) to-a)

  hash = Hash [codes]

  raw("\e[9" + hash [color] to-s + "m") <> self <> raw("\e[0m")

Object pretty-print := text(inspect)
String pretty-print := text(inspect gsub("\\#", "#")) colored(.yellow)
Integer pretty-print := super colored(.blue)
Float pretty-print := super colored(.blue)
TrueClass pretty-print := super colored(.green)
FalseClass pretty-print := super colored(.red)
NilClass pretty-print := super colored(.black)

Doc pretty-print := self

Array pretty-print := list(pretty-sequence(self))

Atomy::Particle pretty-print := do:
  wildcard = [c]:
    if(c equal(_undefined)?)
      then: '_
      else: c

  operator? = @message to-s !~ r"^[a-z_]"

  args = @arguments collect .(wildcard [_])

  msg-args =
    if(operator?)
      then:
        text(@message to-s) <+> args first unamb
      else:
        ident(@message to-s) <>
          tupled(pretty-sequence(args))

  partial =
    if(@receiver equal(_undefined)?)
      then:
        if(operator?)
          then: parens(msg-args)
          else: msg-args
      else: parens(@receiver unamb <+> msg-args)

  text(".") <> partial

Atomy::Particle to-s := show

Symbol pretty-print := do:
  s = to-s
  if(s =~ r"[A-Z][a-zA-Z0-9_]*|^[\p{Ll}_][\p{L}_\d\-]*$"(u))
    then: text(".") <> ident(s)
    else: text(".") <> s pretty

Hash pretty-print :=
  text("#") <>
    align $:
      (lbrace </>
        tree $:
          to-a collect [[k, v]]:
            from(.binary):
              k unamb <+> text("->") <+> v unamb
      ) nest(2) </>
        rbrace

Atomy::AST open:
  Block unamb := pretty
  ClassVariable unamb := pretty
  Call unamb := pretty
  Compose unamb :=
    if(from(.binary, .compose)?)
      then: pretty
      else: parens(pretty)
  Constant unamb := pretty
  GlobalVariable unamb := pretty
  (Tree ? @nodes size < 2) unamb := pretty
  InstanceVariable unamb := pretty
  List unamb := pretty
  Primitive unamb := pretty
  QuasiQuote unamb := pretty
  Quote unamb := pretty
  ScopedConstant unamb := pretty
  Send unamb :=
    if(from(.binary, .compose)?)
      then: pretty
      else: parens(pretty)
  Splice unamb := pretty
  String unamb := pretty
  ToplevelConstant unamb := pretty
  Prefix unamb :=
    if(from(.postfix)?)
      then: parens(pretty)
      else: pretty
  Postfix unamb :=
    if(from(.postfix)?)
      then: parens(pretty)
      else: pretty
  Unquote unamb := pretty
  Word unamb := pretty
  Pattern unamb := @pattern unamb
  Node unamb := parens(pretty)

  Binary pretty-print :=
    from(.binary):
      ((@lhs unamb <+> text(@operator)) </> @rhs unamb) hang(2)

  Block pretty-print := do:
    args =
      if(@arguments empty?)
        then: empty
        else: list(pretty-sequence(@arguments))

    contents = tree(pretty-sequence(@contents))

    align(args <+> (lbrace </> contents) nest(2) </> rbrace)

  Call pretty-print := @name pretty <> tupled(pretty-sequence(@arguments))

  Compose pretty-print := @left pretty <+> @right pretty

  Constant pretty-print := text(@name)

  Infix pretty-print :=
    hsep([
      text(".infix")
      text(@associativity to-s)
      @precedence pretty
      hsep(@operators map [o] { text(o) })
    ])

  List pretty-print :=
    from(.list):
      list(pretty-sequence(@elements))

  Literal pretty-print := @value pretty

  Macro pretty-print :=
    text("macro") <+> parens(@pattern pretty) <+> @body pretty

  Postfix pretty-print :=
    from(.postfix):
      @receiver unamb <> text(@operator)

  Prefix pretty-print :=
    from(.prefix):
      text(@operator) <> @receiver unamb

  Primitive pretty-print :=
    @value match:
      .self -> text("self")
      .true -> text("true")
      .false -> text("false")
      .nil -> text("nil")
      x -> text(x inspect)

  QuasiQuote pretty-print :=
    from(.prefix):
      text("`") <> @expression unamb

  Quote pretty-print :=
    from(.prefix):
      text("'") <> @expression unamb

  ScopedConstant pretty-print :=
    from(.scoped-constant):
      @parent unamb <> text("::") <> text(@name)

  Splice pretty-print :=
    from(.prefix):
      text("~*") <> @expression unamb

  String pretty-print := text(@value inspect gsub("\\#", "#"))

  ToplevelConstant pretty-print := text("::") <> text(@name)

  Unquote pretty-print :=
    from(.prefix):
      text("~") <> @expression unamb

  Word pretty-print := ident(@text to-s)

  Tree pretty-print :=
    if(^Multiline)
      then: from(.top): vcat(pretty-sequence(@nodes))
      else: from(.list): tree(pretty-sequence(@nodes))

  Pattern pretty-print := @pattern pretty


Atomy::Patterns open:
  And pretty-print := `(~@a & ~@b) pretty
  Any pretty-print := text("_")
  Attribute pretty-print := `(~@receiver ~(Atomy::AST::Word new(-1, @name))) pretty
  BlockPass pretty-print := `&~@pattern pretty
  Constant pretty-print := @constant pretty
  Default pretty-print := `(~@pattern = ~@default) pretty
  HeadTail pretty-print := `(~@head . ~@tail) pretty
  List pretty-print := `[~*(@patterns collect .to-node)] pretty
  Literal pretty-print := @value pretty
  Match pretty-print := @value pretty
  Named pretty-print :=
    if(@pattern is-a(Any)?)
      then: text(@name)
      else: text(@name) <> text(":") <+> @pattern pretty
  NamedClass pretty-print :=
    `(@@~(Atomy::AST::Word new(-1, @identifier))) pretty
  NamedInstance pretty-print :=
    `(@~(Atomy::AST::Word new(-1, @identifier))) pretty
  NamedGlobal pretty-print :=
    `($~(Atomy::AST::Word new(-1, @identifier))) pretty
  Or pretty-print := `(~@a | ~@b) pretty
  Particle pretty-print :=
    Atomy::Particle new(
      @receiver
      @message
      @arguments patterns
    ) pretty
  Predicate pretty-print := `(~@pattern ? ~@test) pretty
  QuasiQuote pretty-print := @quoted pretty
  Quote pretty-print := `'~@expression pretty
  SingletonClass pretty-print := @body pretty
  Splat pretty-print := `*~@pattern pretty
  With pretty-print := `(~@pattern with(~@expression, ~@sub-pattern)) pretty

  And unamb := parens(pretty)
  Attribute unamb := parens(pretty)
  Default unamb := parens(pretty)
  HeadTail unamb := parens(pretty)
  Named unamb :=
    if(@pattern is-a(Any)?)
      then: pretty
      else: parens(pretty)
  Or unamb := parens(pretty)
  Predicate unamb := parens(pretty)
  With unamb := parens(pretty)
