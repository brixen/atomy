use("core")
use("define")
use("comparison")
use("node")

infix("<- ->", 20, .right)
infix("while until", 5, .right)
infix("if unless", 5, .right)

macro(~x if ~y): `(when(~y): ~x)
macro(~x unless ~y): `(unless(~y): ~x)

macro(if(~x) then ~(y: Block) else ~(z: Block)):
  IfThenElse new(node line, x, y body, z body)

macro(otherwise): 'true

macro(return(~y)):
  Return new(node line, y)

macro(~x ensuring ~(y: Block)):
  Ensure new(node line, x caller, y body)

macro(when(~c) ~(b: Block)):
  `(if(~c) then ~b else: nil)

macro(unless(~c) ~(b: Block)):
  `(if(~c) then: nil; else ~b)

macro(super):
  Super new(node line, [])

splat-from(arguments) = do:
  args = arguments dup

  splat =
    if(args last is-a(Atomy AST Prefix)? and
        args last receiver == "*" to-sym)
      then: args pop receiver
      else: nil

  [args, splat]

macro(super &~blk):
  Super new(node line, [], nil, blk)

macro(super ~(blk: Block)):
  Super new(node line, [], nil, blk)

macro(super(~*pRiNcEsS)):
  [args, splat] = splat-from(pRiNcEsS)
  Super new(node line, args, splat)

macro(super(~*as) ~(blk: Block)):
  [args, splat] = splat-from(as)
  Super new(node line, args, splat, blk)

macro(super(~*as) &~blk):
  [args, splat] = splat-from(as)
  Super new(node line, args, splat, blk)


Atomy AST open:
  ast:
    Break(.value)
    Next(.value)

  Break bytecode(g, mod) := do:
    pos(g)
    mod compile(g, @value)
    g raise-break

  Next bytecode(g, mod) := do:
    pos(g)
    mod compile(g, @value)
    g ret


macro(break):
  Break new(node line, 'nil)

macro(break(~x)):
  Break new(node line, x)

macro(next):
  Next new(node line, 'nil)

macro(next(~x)):
  Next new(node line, x)

key-from(x) = x
key-from(x: Atomy AST Compose) =
  if(x right is-a(Atomy AST Block)?)
    then: x
    else: x right

pair-from(x) =
  raise("unknown pair `" + x inspect + "'")

pair-from(`(~k -> ~v)) =
  [[k, v]]

pair-from(p: `(~x { ~*ys })) = do:
  this = [[key-from(x), `(do: ~*ys)]]

  if(x is-a(Atomy AST Compose)? and not x right is-a(Atomy AST Block)?)
    then: pair-from(x left) + this
    else: this

pairs-from(es) :=
  es collect [e] { pair-from(e) } flatten(1)

macro(condition ~(b: Block)):
  pairs-from(b contents) reverse inject('nil) [acc, [x, y]]:
    `(if(~x) then: ~y; else: ~acc)

macro(~val match ~(b: Block)):
  branches = pairs-from(b contents) collect [x, y]:
    MatchBranch new(x line, x, y)

  Match new(node line, val, branches)

macro(~x rescue ~(y: Block)):
  branches = pairs-from(y contents) collect [p, e]:
    RescueHandler new(p line, p, e)

  Rescue new(node line, x caller, branches)

macro(~x rescue ~(y: Block) else ~(z: Block)):
  branches = pairs-from(y contents) collect [p, e]:
    RescueHandler new(p line, p, e)

  Rescue new(node line, x caller, branches, z body)

Atomy AST open:
  ast:
    Super([.arguments], .splat?, .block?)

  Super bytecode(g, mod) := do:
    pos(g)

    @arguments each [a]:
      mod compile(g, a)

    when(@splat):
      mod compile(g, @splat)
      g cast-array

    if(@block)
      then: mod compile(g, @block)
      else: g push-nil

    name = nil
    when(g state super?):
      name =! g state super name

    g send-super(name, @arguments size, !!@splat)
