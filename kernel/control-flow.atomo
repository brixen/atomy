macro (if(x) then(&y) else(&z))
  Atomo::AST::IfThenElse new(line, x, y, z)
  
macro (otherwise) 'true

macro (condition(&bs))
  bs contents reverse inject('nil) (acc, `(~x -> ~y)):
    `(if(~x) then: ~y; else: ~acc)

macro (while(cond, &body))
  Atomo::AST::While new(line, cond, `(~body call))

macro (until(cond, &body))
  Atomo::AST::While new(line, `!~cond, `(~body call))

macro (return(y))
  Atomo::AST::Return new(line, y)

macro (begin(&x) rescue(&y))
  Atomo::AST::Catch new(line, x body, `(~y call($exception)))

macro (begin(&x) rescue(&y) else(&z))
  Atomo::AST::Catch new(line, x body, `(~y call($exception)), z body)

macro (x ensuring(&y))
  Atomo::AST::Ensure new(line, `(~x call), `(~y call))

unless(false, &blk) := blk call
unless(nil, &blk) := blk call
unless(_, &_) := nil

when(false, &_) := nil
when(nil, &_) := nil
when(_, &blk) := blk call
