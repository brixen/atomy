dynamic(handlers, [])
dynamic(restarts, [])

-- Exceptions used by condition system
data(RuntimeError):
  NoRestartError(@name)

data(Exception):
  RestartException(@context, @receiver, @args)

NoRestartError initialize(@name) :=
  super("unknown restart: " + @name)

RestartException initialize(@context, @receiver, @args) :=
  super("you should never see or `rescue' this")


-- Base condition hierarchy
data(Object):
  Condition:
    Error:
      SimpleError(@value)

    Warning:
      SimpleWarning(@value)

SimpleError message := "ERROR: " + @value to-s
SimpleWarning message := "WARNING: " + @value to-s


-- Default debugger; show the error message and let them
-- pick from the available restarts.
class(DefaultDebugger):
  class(<< self):
    define(show-error-banner(e)):
      ("-" * 78) print
      e message each-line [l]:
        ("*** " + l) display

      "\n" display

    define(show-options-for(e)):
      linear = []
      ^restarts reverse-each [[rs, context]]:
        rs each-pair [n, x]:
          linear << [context, n, x]

      when(linear empty?):
        exit(1)

      "\n" display
      "restarts:" print
      linear each-with-index [[_, n, _], i]:
        ("  :" + i to-s + " -> " + n to-s) print

    define(run(e)):
      show-error-banner(e)

      linear = show-options-for(e)

      "!> " display
      [context, _, x] = linear [gets to-i]
      raise(RestartException new(context, x, []))


-- the current debugging handler; should be an object
-- that will respond to #run with the error passed.
dynamic(debugger, DefaultDebugger)


-- register handlers for executing some action
macro(x bind(&y)):
  names [a]:
    callback = `([~a]: ~a match: ~*(y contents))
    `(let(handlers = ^handlers + [~callback]):
        ~(x caller))

-- register restarts available to handlers for the duration
-- of some action's executation
macro(with-restarts(*restarts, &body)):
  names [context]:
    rs = restarts collect [`(~n -> ~e)]:
      n match:
        Atomy::AST::Variable ->
          `(#~n -> { ~e })

        Atomy::AST::Send -> do:
          name = Atomy::AST::Variable new(0, n method-name)
          `(#~name -> [~*(n arguments)] { ~e })

    `({ let(restarts = ^restarts + [[#[~*rs], #~context]]):
          ~(body caller)
      } rescue:
          (e: RestartException(#~context, recv, args)) ->
            recv call(*args))


-- send a signal through the handlers, nearest-first
signal(c) := do:
  ^handlers reverse-each [callback]:
    callback [c]

  #ok

-- send a signal, and start the debugger if none handle it
error(v) := error(SimpleError new(v))
error(e: Error) := do:
  signal(e)

  with-output-to(^error-port):
    ^debugger run(e)

-- send a signal, and write the message to the error port
warning(v) := warning(SimpleWarning new(v))
warning(w: Warning) :=
  with-restarts(muffle-warning -> #ok):
    signal(w)

    with-output-to(^error-port):
      w message print

  #ok


-- call a restart with the given args
restart(name, *args) := do:
  ^restarts reverse-each [[rs, context]]:
    rs [name] match:
      (x: Proc) ->
        raise(RestartException new(context, x, args))

  raise(NoRestartError new(name))
