for-macro:
  key-name(x: Atomy::AST::Compose) := key-name(x message)
  key-name(x: Atomy::AST::Variable) := x name


macro(#(l: List)):
  pairs = pairs-from(l elements)
  keys = pairs collect [[k, _]]: `#~key-name(k)
  values = pairs collect [[_, v]]: v
  Atomy::AST::Hash new(line, keys, values)


class(Atomy::AST::Hash < Atomy::AST::Node):
  children([#keys], [#values])
  generate

  bytecode(g) := do:
    pos(g)

    g push-cpath-top
    g find-const(#Hash)
    g push-int(@keys size)
    g send(#new-from-literal, 1)

    @keys each-with-index [n, i]:
      g dup
      n compile(g)
      @values [i] compile(g)
      g send("[]=" to-sym, 2)
      g pop
