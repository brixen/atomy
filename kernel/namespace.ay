require("delegate")

module(Atomy):
  HELPERS = Hash new

class(AtomyDelegator < SimpleDelegator):
  define(method-missing(m, *args) &block):
    target = self _-getobj--
    { if(target respond-to?(m, true))
        then: target _-send--(m, *args) &block
        else: super(m, *args) &block
    } ensuring:
      when($"@"):
        $"@" delete-if [t]:
          r"\A#{Regexp quote(_FILE)}:#{_LINE - 2}:" =~ t


with-static-scope(mod) &blk :=
  blk block call-under $:
    self
    Rubinius::StaticScope new $:
      mod
      Rubinius::StaticScope of-sender


macro(namespace: ~*body):
  names [mod]:
    `(do:
        ~mod = Module new

        with-static-scope(~mod):
          Self = ~mod

          ~*body

          class(Provider < AtomyDelegator):
            include(Self)

          ~mod)

macro(namespace(~name): ~*body):
  `(module(~name):
      ~*body

      class(Provider < AtomyDelegator):
        include(~name)

      ~name)

macro(using(~name) ~body):
  `(with-variables-of(self):
      ~body block call-on-instance(~name const-get(#Provider) new(self)))

macro(~body where: ~*helpers):
  names [helper]:
    `(using(Atomy::HELPERS[#~helper] ||= namespace: ~*helpers) ~body)
