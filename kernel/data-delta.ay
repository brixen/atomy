macro (data(root, &children)) do:
  cs = children contents map (e):
    e match:
      Atomy::AST::Send -> do:
        name =
          Atomy::AST::Constant new(0, e method-name)

        cls =
          `(class(~name < ~root):
              attr-accessor(~*(
                e arguments collect (a):
                  `#~(a receiver)))

              initialize(~*(e arguments)) := #ok)

        if(e block)
          then:
            `({ ~cls
                data(~name):
                  ~*(e block contents)
              }) body
          else:
            cls

      Atomy::AST::Send -> do:
        name =
          Atomy::AST::Constant new(0, e method-name)

        `(class(~name < ~root):
            attr-accessor(~*(
              e arguments collect (a):
                `#~(a receiver)))

            initialize(~*(e arguments)) := #ok)

      Atomy::AST::Constant ->
        `(class(~e < ~root):)

      Atomy::AST::ScopedConstant ->
        `(class(~e < ~root):)

      Atomy::AST::ToplevelConstant ->
        `(class(~e < ~root):)

      _ -> raise("unknown module name: " + e to-s)

  `{ class(~root):;, ~*cs } body

