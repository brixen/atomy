macro(data(root, &children)):
  cs = children contents map (e):
    e match:
      Atomy::AST::Send -> do:
        name =
          Atomy::AST::Constant new(0, e method-name)

        pat = name

        tmps = names(e arguments size) collect (t):
          Atomy::AST::Unquote new(0, t)

        e arguments zip(tmps) ([a, t]):
          pat =! `(~pat & with(~a, ~t))

        pat = pat expand

        cons = Atomy::AST::Send new(
          0
          'self
          tmps
          name identifier
          nil
          true
        )

        pat-def =
          `(~(Atomy::AST::QuasiQuote new(0, cons)) to-pattern :=
              ~(Atomy::AST::QuasiQuote new(0, pat)) to-pattern)

        define =
          `({ class(~name < ~root):
                attr-accessor(~*(
                  e arguments collect (a):
                    `#~(a receiver)))

                initialize(~*(e arguments)) := #ok

              ~pat-def
            }) body

        if(e block)
          then:
            `({ ~define

                data(~name):
                  ~*(e block contents)
              }) body
          else:
            define

      Atomy::AST::Constant ->
        `(class(~e < ~root):)

      Atomy::AST::ScopedConstant ->
        `(class(~e < ~root):)

      Atomy::AST::ToplevelConstant ->
        `(class(~e < ~root):)

      _ -> raise("unknown module name: " + e to-s)

  `{ class(~root):;, ~*cs } body


macro(macro-quoter(n, &x)):
  `(evaluate-when(compile, run):
      Atomy::Macro::CURRENT_ENV quoter(#~n, &~x))

macro-quoter(w) (c): c split

macro-quoter(r) (c, fs):
  flags = 0

  when(fs include?("m")):
    flags |= Regexp::MULTILINE

  when(fs include?("i")):
    flags |= Regexp::IGNORECASE

  when(fs include?("x")):
    flags |= Regexp::EXTENDED

  `(Regexp new(~c, ~flags))

macro-quoter(raw) (c): c


macro(_undefined):
  Atomy::AST::Undefined new(line)

no-namespace:
  class(Atomy::AST::Undefined < Atomy::AST::Node):
    generate

    bytecode(g) := do:
      pos(g)
      g push-undef

    to-pattern := Atomy::Patterns::Any new
