-- a macro so we can actually, you know, send messages
macro(~_ ~Word): to-send

macro(~_ ~(Word)(~*_)): to-send

macro(~(Word)(~*_)): to-send

macro(nil): Primitive new(line, "nil" to-sym)

macro(self): Primitive new(line, "self" to-sym)

macro(true): Primitive new(line, "true" to-sym)

macro(false): Primitive new(line, "false" to-sym)

macro(@~(x: Word)): InstanceVariable new(line, x text)

macro(~x = ~y): Assign new(line, x to-pattern to-node, y)

-- [x, y] { x + y }
macro(~List ~Block):
  @right arguments = @left elements
  @right

-- foo { bar }
macro(~Word ~Block):
  x = @left to-send
  x block = @right
  x

-- foo(a) { bar }
macro(~(Word)(~*args) ~Block):
  x = @left to-send
  x block = @right
  x

-- x foo { bar }
macro(~_ ~Word ~Block):
  x = @left to-send
  x block = @right
  x

-- x foo(a) { bar }
macro(~_ ~(Word)(~*args) ~Block):
  x = @left to-send
  x block = @right
  x

-- collect [x] { x + 1 }
macro(~Word [~*ys] ~(z: Block)):
  z arguments = ys
  x = @left left to-send
  x block = z
  x

-- collect(a) [x] { x + 1 }
macro(~(Word)(~*args) [~*ys] ~(z: Block)):
  z arguments = ys
  x = @left left to-send
  x block = z
  x

-- [1, 2, 3] collect [x] { x + 1 }
macro(~_ ~Word [~*ys] ~(z: Block)):
  z arguments = ys
  x = @left left to-send
  x block = z
  x

-- [1, 2, 3] collect(a) [x] { x + 1 }
macro(~_ ~(Word)(~*args) [~*ys] ~(z: Block)):
  z arguments = ys
  x = @left left to-send
  x block = z
  x

-- foo [bar, ...]
macro(~x [~*ys]):
  to-send tap [x]:
    x message-name = "[]"
    x arguments = ys + x arguments

-- Foo(...)
macro(~(Constant)(~*args)):
  to-send tap [x]:
    x message-name = @name identifier

-- Bar::Foo(...)
macro(~(ScopedConstant)(~*args)):
  to-send tap [x]:
    x receiver = @name parent
    x message-name = @name identifier

macro(_LINE): line
macro(_FILE): File new(line)

"operators define cosmetics data comparison meta dynamic control-flow patterns
precision node data-delta namespaces particles maps block doc pretty errors
format concurrency io condition therie repl kpeg" split each [k]:
  puts("loading " + k)
  require(File expand-path("../", _FILE) + "/" + k)
