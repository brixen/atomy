module(Atomy::AST):
  '_ pattern :=
    Atomy::Patterns::Any new

  `(~h . ~t) pattern :=
    Atomy::Patterns::HeadTail new(h to-pattern, t to-pattern)

  `(~p = ~d) pattern :=
    Atomy::Patterns::Default new(p to-pattern, d)

  `(? ~t) pattern :=
    Atomy::Patterns::Predicate new(Atomy::Patterns::Any new, t)

  `(~p ? ~t) pattern :=
    Atomy::Patterns::Predicate new(p to-pattern, t)

  `(~a & ~b) pattern :=
    Atomy::Patterns::And new(a to-pattern, b to-pattern)

  `(~a | ~b) pattern :=
    Atomy::Patterns::Or new(a to-pattern, b to-pattern)

  `(~x with(~e, ~y)) pattern :=
    Atomy::Patterns::With new(x to-pattern, e, y to-pattern)

  `(with(~e, ~y)) pattern :=
    Atomy::Patterns::With new(Atomy::Patterns::Any new, e, y to-pattern)

  `@@~n pattern :=
    Atomy::Patterns::NamedClass new(n text)

  `$0 pattern :=
    Atomy::Patterns::NamedGlobal new("0")

  `$exception pattern :=
    Atomy::Patterns::NamedGlobal new("!")

  `$path pattern :=
    Atomy::Patterns::NamedGlobal new(":")

  `$separator pattern :=
    Atomy::Patterns::NamedGlobal new("/")

  `$~(n: Atomy::AST::Constant) pattern :=
    Atomy::Patterns::NamedGlobal new(n name)

  `$~(n: Atomy::AST::String) pattern :=
    Atomy::Patterns::NamedGlobal new(n value)

  `$~(n: Atomy::AST::Word) pattern :=
    Atomy::Patterns::NamedGlobal new(n text)

  `@~n pattern :=
    Atomy::Patterns::NamedInstance new(n text)

  `%~x pattern :=
    Atomy::Patterns::RuntimeClass new(x)

  `&~x pattern :=
    Atomy::Patterns::BlockPass new(x to-pattern)

  `*~x pattern :=
    Atomy::Patterns::Splat new(x to-pattern)

  'self pattern :=
    Atomy::Patterns::Match new(#self)

  'true pattern :=
    Atomy::Patterns::Match new(#true)

  'false pattern :=
    Atomy::Patterns::Match new(#false)

  'nil pattern :=
    Atomy::Patterns::Match new(#nil)

  `#~(x: Atomy::AST::Word) pattern :=
    Atomy::Patterns::Literal new(x text)

  `#~(x: Atomy::AST::Constant) pattern :=
    Atomy::Patterns::Literal new(x name)

  `#~(x: Atomy::AST::String) pattern :=
    Atomy::Patterns::Literal new(x value to-sym)
