module(Atomy::Patterns):
  module(Atomy::AST):
    '_ to-pattern := Any new

    Variable to-pattern :=
      Named new(@name, Any new)

    Primitive to-pattern :=
      Atomy::Patterns::Match new(@value)

    List to-pattern :=
      Atomy::Patterns::List new(@elements collect (e): e to-pattern)

    Constant to-pattern :=
      Atomy::Patterns::Constant new(self)

    ScopedConstant to-pattern :=
      Atomy::Patterns::Constant new(self)

    ToplevelConstant to-pattern :=
      Atomy::Patterns::Constant new(self)

    `(~h . ~t) to-pattern :=
      HeadTail new(h to-pattern, t to-pattern)

    `(~p = ~d) to-pattern :=
      Default new(p to-pattern, d)

    `(== ~v) to-pattern := Strict new(v)

    `(? ~t) to-pattern := Predicate new(Any new, t)

    `(~p ? ~t) to-pattern := Predicate new(p to-pattern, t)

    Quote to-pattern :=
      Atomy::Patterns::Quote new(@expression)

    Block to-pattern := Atomy::Patterns::Metaclass new(self)

    `@@~n to-pattern := NamedClass new(n name)

    `$~n to-pattern := NamedGlobal new(n name)

    `@~n to-pattern := NamedInstance new(n name)

    `%~x to-pattern := RuntimeClass new(x, nil)

    `&~x to-pattern :=
      Atomy::Patterns::BlockPass new(x to-pattern)

    `*~x to-pattern :=
      Atomy::Patterns::Splat new(x to-pattern)

    Particle to-pattern :=
      Atomy::Patterns::Particle new(@name to-sym)

    Send to-pattern :=
      if(@block)
        then: Named new(@method-name, @block contents at(0) to-pattern)
        else: Atomy::Patterns::Unary new(@receiver, @method-name)

    QuasiQuote to-pattern :=
      Atomy::Patterns::QuasiQuote new(self)

    String to-pattern :=
      Atomy::Patterns::Match new(@value)

    Node to-pattern :=
      raise("unknown pattern: " + self inspect)
