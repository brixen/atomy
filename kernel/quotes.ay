use("core")
use("define")
use("control-flow")
use("comparison")

macro(macro-quoter(~n) [~*as]: ~*body):
  names [str, args]:
    strpat = Unquote new(0, `(~str: Atomy::AST::String))
    argpat = Splice new(0, args)

    raw = as shift
    when(raw):
      raw =! `(~raw = ~str raw or ~str value)

    flags = as shift
    when(flags):
      flags =! `(~flags = ~args collect .text)

    val = as shift
    when(val):
      val =! `(~val = ~str value)

    `(do:
        macro(~n ~strpat):
          ~args = []
          ~*([raw, flags, val] compact)
          ~*body

        macro(~n (~strpat)(~argpat)):
          ~*([raw, flags, val] compact)
          ~*body)


macro-quoter(w) [_, _, v]: v split

macro-quoter(s) [_, _, v]:
  v split collect [s]:
    if(s =~ Regexp new("[\p{Ll}_]", Regexp::KCODE_UTF8))
      then: s tr("-", "_") to-sym
      else: s to-sym

macro-quoter(raw) [r]: r
