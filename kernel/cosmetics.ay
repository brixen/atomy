use("core")
use("define")
use("control-flow")

macro(~x $~(y: Block)):
  x to-send tap [z]:
    z arguments += y contents

macro(~x ?~(y ? to-word)):
  `(~x respond-to(~(y to-word text))?)

macro(~x ?[~*as]):
  names [v]:
    `(do:
        ~v = ~x
        if(~v respond-to(.[])?)
          then: ~v [~*as]
          else: nil)

macro(~x ?~(y: Word)(~*as)):
  names [v]:
    `(do:
        ~v = ~x
        if(~v respond-to(.~y)?)
          then: ~v ~(y)(~*as)
          else: nil)

macro(~x ?~(y: Word)(~*as)?):
  names [v]:
    `(do:
        ~v = ~x
        if(~v respond-to(.(~y)?)?)
          then: ~v ~(y)(~*as)?
          else: nil)

macro(~x ?~(y: Word)(~*as)!):
  names [v]:
    `(do:
        ~v = ~x
        if(~v respond-to(.(~y)!)?)
          then: ~v ~(y)(~*as)!
          else: nil)
