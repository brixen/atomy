macro(x = y):
  Atomy::AST::Assign new(x line, x, y)

macro(x =! y):
  Atomy::AST::Set new(x line, x, y)

macro(x := y):
  where = Thread current at(#atomy-define-in)
  Atomy::Namespace register(x namespace-symbol)
  Atomy::AST::Define new(x line, x, y resolve, where)

macro(define(x, &y)):
  where = Thread current at(#atomy-define-in)
  Atomy::Namespace register(x namespace-symbol)
  Atomy::AST::Define new(x line, x, y block-body resolve, where)

macro(do(&b)): b body

macro(evaluate-when('run, 'compile, &x)):
  x body evaluate
  x body

macro(evaluate-when('compile, 'run, &x)):
  x body evaluate
  x body

macro(evaluate-when('compile, &x)):
  x body evaluate
  'nil

macro(for-macro(&b)):
  b body evaluate(Atomy::Macro::CURRENT_ENV)
  `(~b block call-on-instance(Atomy::Macro::CURRENT_ENV))

macro(x **= y): `(~x =! (~x ** ~y))
macro(x *= y): `(~x =! (~x * ~y))
macro(x <<= y): `(~x =! (~x << ~y))
macro(x >>= y): `(~x =! (~x >> ~y))
macro(x &&= y): `(~x =! (~x && ~y))
macro(x &= y): `(~x =! (~x & ~y))
macro(x ||= y): `(~x =! (~x || ~y))
macro(x |= y): `(~x =! (~x | ~y))
macro(x += y): `(~x =! (~x + ~y))
macro(x -= y): `(~x =! (~x - ~y))
macro(x /= y): `(~x =! (~x / ~y))
macro(x ^= y): `(~x =! (~x ^ ~y))
macro(x %= y): `(~x =! (~x % ~y))

macro(x match(&b)):
  `(do: ~(Atomy::AST::Match new(line, x, b)))

macro(class(`(<< ~obj), &body)):
  Atomy::AST::SingletonClass new(obj line, obj, body block-body)

macro(class(`(~name < ~sup), &body)):
  Atomy::AST::Class new(name line, name, body block-body, sup)

macro(class(name, &body)):
  Atomy::AST::Class new(name line, name, body block-body)

macro(module(name, &body)):
  Atomy::AST::Module new(name line, name, body block-body)
