macro(do ~(b: Block)): b body

macro(~x =! ~y):
  Set new(x line, x to-pattern to-node, y)

macro(~x := ~y): Define new(line, x, y)

macro(define(~x) ~(y: Block)):
  `(~x := ~(y block-body))

macro(~x **= ~y): `(~x =! (~x ** ~y))
macro(~x *= ~y): `(~x =! (~x * ~y))
macro(~x <<= ~y): `(~x =! (~x << ~y))
macro(~x >>= ~y): `(~x =! (~x >> ~y))
macro(~x &&= ~y): `(~x =! (~x && ~y))
macro(~x &= ~y): `(~x =! (~x & ~y))
macro(~x ||= ~y): `(~x =! (~x || ~y))
macro(~x |= ~y): `(~x =! (~x | ~y))
macro(~x += ~y): `(~x =! (~x + ~y))
macro(~x -= ~y): `(~x =! (~x - ~y))
macro(~x /= ~y): `(~x =! (~x / ~y))
macro(~x ^= ~y): `(~x =! (~x ^ ~y))
macro(~x %= ~y): `(~x =! (~x % ~y))

macro(class(~name) ~(b: Block)):
  Class new(name line, name, b block-body)

macro(class(<< ~obj) ~(b: Block)):
  SingletonClass new(obj line, obj, b block-body)

macro(class(~name < ~sup) ~(b: Block)):
  Class new(name line, name, b block-body, sup)

macro(module(~name) ~(b: Block)):
  Module new(name line, name, b block-body)
