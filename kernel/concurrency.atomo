require("actor")

me := Actor current

Actor <- v := send(v)

macro (receive(&body))
  { bs = body contents collect { `(~pat -> ~body) |
      blk = Atomo::AST::Block new(body line, [pat], [body])
      `(e when(~(Atomo::Patterns from_node(pat)), &~blk))
    }

    branches = Atomo::AST::Block new(body line, bs, ['e])

    `(Actor receive(&~branches))
  } call

macro (receive: body after: timeout)
  { bs = body contents collect { `(~pat -> ~body) |
      blk = Atomo::AST::Block new(body line, [pat], [body])
      `(e when(~(Atomo::Patterns from_node(pat)), &~blk))
    }

    bs << `(e after(~(timeout lhs), &{ ~(timeout rhs) }))

    branches = Atomo::AST::Block new(body line, bs, ['e])

    `(Actor receive(&~branches))
  } call

spawn(&action) := Actor spawn(&action)

spawn-link(&action) := Actor spawn(&action)
