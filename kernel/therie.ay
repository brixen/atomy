use("dynamic")
IO = use("io")
use("condition")

dynamic(nesting-level, 0)

class(Stats):
  attr-accessor(#passed, #failed)

  initialize := do:
    @passed = 0
    @failed = 0

  inspect := f"Stats(@passed = %d, @failed = %d)" [@passed, @failed]

dynamic(stats)

export

theorize &tests :=
  let(stats = Stats new):
    tests call
    "\n" display

    ^stats onto:
      f"total of %d tests (%s passed, %s failed)" [
        failed + passed
        passed to-s colored(#green)
        if(failed == 0)
          then: "0"
          else: failed to-s colored(#red)
      ] display

      "\n" display

    ^stats


describe(what) &body := do:
  f"- %s" [what] indented println

  let(nesting-level = ^nesting-level + 1):
    body call

  nil


it(description) &tests := do:
  { tests call
    f"✓ %s" [description] indented colored(#green) println
  } rescue {
    e:
      when(^stats):
        ^stats failed += 1

      f"✗ %s" [description] indented colored(#red) println
      f"  ` %s: %s" [
        e class name
        e message
      ] indented colored(#yellow) println

      e backtrace first((ENV["THERIE_BT_LIMIT"] || 5) to-i) each [l]:
        f"    %s" [l colored(#cyan)] indented println
  } else:
    when(^stats):
      ^stats passed += 1

  nil


macro(~x should ~(check: Block)):
  `(unless(~x onto ~check):
      raise(f"assertion failed for %v" ['~x pretty]))


x should-be(y) :=
  unless(x == y):
    raise(f"expected %v, got %v" [y, x])


x should-raise(y) :=
  x rescue {
    e ->
      unless(e kind-of?(y)):
        raise(f"expected exception %s, got: %s" [y, e class])
  } else:
      raise("#should-raise - no exception raised")


x should-error(y) :=
  { with-restarts(errored -> nil):
      x call
      raise("#should-error - no error signaled")
  } bind {
    (e: ExceptionError) ->
      raise(e exception)

    (e: Error):
      when(e kind-of?(y)):
        restart(#errored)

      raise(f"expected error %s, got: %s" [y, e message])
  }


-- helpers
String indented := " " * (^nesting-level * 2) + self

String colored(color) := do:
  -- only makes sense to colorize if we're outputting to a terminal
  unless(^(IO output-port) tty?):
    return(self)

  codes =
    [ #black
      #red
      #green
      #yellow
      #blue
      #magenta
      #cyan
      #white
    ] to-a zip((0 .. 7) to-a)

  hash = Hash [codes]

  "\e[3" + hash [color] to-s + "m" + self + "\e[0m"
