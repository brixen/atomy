macro(in-namespace(n, &b)):
  names (res):
    `(let(namespace = Atomy::Namespace ensure(#~n)):
        evaluate-when(compile):
          Atomy::STATE at(#st) put(Atomy::Namespace get)
          Atomy::Namespace ensure(#~n)

        ~res = ~(b body)

        evaluate-when(compile):
          Atomy::Namespace set(Atomy::STATE fetch(#st))

        ~res)

macro(no-namespace(&b)):
  names (res):
    `(let(namespace = nil):
        evaluate-when(compile):
          Atomy::STATE at(#st) put(Atomy::Namespace get)
          Atomy::Namespace set(nil)

        ~res = ~(b body)

        evaluate-when(compile):
          Atomy::Namespace set(Atomy::STATE fetch(#st))

        ~res)

macro(use(*ns)):
  `{ ~*(ns collect (n): `(Atomy::Namespace get use(#~n)))
   } body

namespace(atomy)

--x print := x writeln

--in-namespace(foo):
  --0 fib := 1
  --1 fib := 1
  --(n: Fixnum) fib := (n - 2) fib + (n - 1) fib

  --10 times:
    --a = Time now
    --p(20 fib, Time now - a)

  --test = (x):
    --x fib atomy/print

  --test (24)

  --String fib := "forty-two!"

  --test ("hello")

--p(20 foo/fib)

--"hello!" print
