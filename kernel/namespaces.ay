dynamic(provide-in, nil)

class(Module):
  using-modules :=
    @using-modules ||= []

module(Atomy):
  { self } using?(x, y) :=
    x == y || x using-modules any? [u]:
      using?(u, y)

Module provide :=
  let(provide-in = self):
    yield

using(which, &blk) := do:
  mods = Rubinius::StaticScope of-sender module using-modules

  mods << which

  when(blk):
    { yield } ensuring:
      -- delete only the first entry
      mods each with-index [x, i]:
        when(x == which):
          mods delete-at(i)
          break

macro(namespace(name) { *body }):
  `(module(~name):
      provide:
        ~*body)  