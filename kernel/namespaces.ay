dynamic(provide-in, nil)

class(Module):
  using-modules :=
    @using-modules ||= []

module(Atomy):
  { self } using?(x, y) :=
    x == y || x using-modules any? [u]:
      using?(u, y)

Module provide :=
  let(provide-in = self):
    yield

using(which) := do:
  Rubinius::StaticScope of-sender module using-modules << which
  nil

with-static-scope(mod, &blk) :=
  blk block call-under $:
    self
    Rubinius::StaticScope new $:
      mod
      Rubinius::StaticScope of-sender

macro(using(which) { *body }):
  `(with-static-scope(~which):
      ~*body)

macro(namespace(name) { *body }):
  `(module(~name):
      provide:
        ~*body)  