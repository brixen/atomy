dynamic(provide-in, nil)

class(Module):
  using-modules :=
    @using-modules ||= Array[]

Module using?(y) :=
  self == y || using-modules any? [u]:
    u using?(y)

Class using?(y) :=
  super || superclass && superclass using?(y)

Module provide(&blk) :=
  let(provide-in = self):
    blk[]

using(which) := do:
  Rubinius::StaticScope of-sender module using-modules << which
  nil

with-static-scope(mod, &blk) :=
  blk block call-under $:
    self
    Rubinius::StaticScope new $:
      mod
      Rubinius::StaticScope of-sender

macro(using(~which) { ~*body }):
  `(with-static-scope(~which):
      ~*body)

macro(namespace(~name) { ~*body }):
  `(module(~name):
      provide:
        ~*body)

macro({ ~*body } where: ~*helpers):
  names [h]:
    `(do:
        ~h = ::Module new
        ~h provide:
          ~*helpers

        using(~h):
          ~*body)
