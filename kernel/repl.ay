use("atomy")

use("doc")
condition = use("condition")
pretty = require("pretty")

require("readline")

try(source, bnd = TOPLEVEL_BINDING, debug = false) =
  with-restarts(retry -> try(source, bnd), abort -> .ok):
    res = Atomy Compiler eval(source, bnd, "(eval)", 1, debug)
    signal(.evaluated(res))

basic-repl(bnd = TOPLEVEL_BINDING, debug = false) =
  loop:
    prompt =
      with-restarts(use-prompt(p) -> p):
        signal(.prompt)
        ">> "

    input =
      { Readline readline(prompt)
      } rescue:
        Interrupt: signal(.quit), ""

    input match:
      nil -> signal(.quit)

      "" -> .ok

      String ? =~ r"^:[[:alnum:]]" ->
        signal(.special(input [1 .. -1]))

      source:
        signal(.input(source))
        try(source, bnd, debug)

    signal(.loop)


ReplDebugger = class:
  singleton:
    show-backtrace(e) := do:
      puts(Rubinius Backtrace backtrace(e backtrace) show)
      debug(e)

    run(e) := do:
      condition DefaultDebugger show-error-banner(e)

      with-restarts(backtrace -> show-backtrace(e)):
        debug(e)

    debug(e) := do:
      condition DefaultDebugger show-options-for(e)

      -- TODO: inherit original binding
      { basic-repl } bind:
        .prompt -> restart(.use-prompt, "[!]> ")

        .special(n ? =~ r"\d+") ->
          ^(condition Restarts) [n to-i] invoke

        .quit -> exit(1)

repl(history = nil, bnd = nil, debug = false) := do:
  mod = Atomy make-wrapper-module
  mod use("atomy")

  before-mod = Atomy CodeLoader module

  Atomy CodeLoader module = mod

  when(history and File exists(history)?):
    File open(history, "r") [f]:
      f readlines each [l]:
        Readline HISTORY << l strip

  sane-history = []

  { let(condition Debugger = ReplDebugger,
        pretty Multiline = true,
        pretty Colored = true):
      frame = 0

      { basic-repl(bnd, debug)
      } bind:
        .prompt ->
          restart(.use-prompt, "[" + frame to-s + "]> ")

        .loop ->
          (frame += 1)

        .quit -> exit(0)

        .input(str) -> (sane-history << str)

        .special("h") ->
          puts(":h\thelp")

        .evaluated(r) ->
          puts((text(" =>") <+> pretty doc(r)) render(76))
  } ensuring:
    Atomy CodeLoader module = before-mod

    when(history):
      File open(history, "a") [f]:
        f puts(*sane-history)
