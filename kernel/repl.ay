require("readline")

basic-repl(bnd = TOPLEVEL_BINDING) :=
  loop:
    prompt =
      with-restarts(use-prompt(p) -> p):
        signal(#prompt)
        ">> "

    in =
      { Readline readline(prompt)
      } rescue:
        Interrupt -> do { signal(#quit), "" }

    in match:
      nil -> signal(#quit)

      "" -> #ok

      String ? (=~ r{^:}) ->
        signal(#special(in slice(1 .. -1)))

      source -> do:
        signal(#input(source))

        try = {
          with-restarts(retry -> try (), abort -> #ok):
            res = Atomy::Compiler evaluate(source, bnd)
            signal(#evaluated(res))
        }

        try ()

    signal(#loop)

class(ReplDebugger):
  class(<< self):
    run(e) := do:
      DefaultDebugger show-error-banner(e)

      linear = DefaultDebugger show-options-for(e)

      { basic-repl } bind:
        #prompt -> restart(#use-prompt, "[!]> ")

        #special(n ? (=~ r"\d+")) -> do:
          [context, _, x] = linear [n to-i]
          raise(RestartException new(context, x, []))

repl(history = nil, bnd = TOPLEVEL_BINDING) := do:
  when(history && File exists?(history)):
    File open(history, "r") (f):
      f readlines each (l):
        Readline::HISTORY << l strip

  SANE_HISTORY = []

  { let(debugger = ReplDebugger):
      frame = 0

      { basic-repl(bnd) } bind:
        #prompt ->
          restart(#use-prompt, "[" + frame to-s + "]> ")

        #loop ->
          (frame += 1)

        #quit -> exit(0)

        #input(str) -> (SANE_HISTORY << str)

        #special("h") ->
          ":h\thelp" print

        #evaluated(r) ->
          (" => " + r pretty render) print
  } ensuring:
    when(history):
      File open(history, "a") (f):
        f puts(*SANE_HISTORY)
