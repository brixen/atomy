use("atomy")

use("doc")
condition = require("condition")
pretty = require("pretty")

require("readline")

try(source, module, debug = false) =
  with-restarts(retry -> try(source, module), abort -> .ok):
    { signal(.evaluated(module eval(source, 1, debug)))
    } rescue:
      (e: StandardError | ScriptError) -> error(e)

basic-repl(module, debug = false) =
  loop:
    prompt =
      with-restarts(use-prompt(p) -> p):
        signal(.prompt)
        ">> "

    input =
      { Readline readline(prompt)
      } rescue:
        Interrupt: signal(.quit), ""

    input match:
      nil -> signal(.quit)

      "" -> .ok

      String ? =~ r"^:[[:alnum:]]" ->
        signal(.special(input [1 .. -1]))

      source:
        signal(.input(source))
        try(source, module, debug)

    signal(.loop)


condition DefaultDebugger data(ReplDebugger(@error))

ReplDebugger(e) run := do:
  show-banner

  with-restarts(backtrace -> show-backtrace(e)):
    debug

ReplDebugger debug := do:
  show-restarts

  -- TODO: inherit original binding
  { /basic-repl(Atomy Module new tap [m]: m use("atomy")) } bind:
    .prompt -> /restart(.use-prompt, "[!]> ")

    .special(n ? =~ r"\d+") ->
      ^(condition Restarts) [n to-i] invoke

    .quit -> exit(1)


repl(history = nil, module = nil, debug = false) := do:
  unless(module):
    module =! Atomy Module new(."(repl)")
    module use("atomy")

  when(history and File exists(history)?):
    File open(history, "r") [f]:
      f readlines each [l]:
        Readline HISTORY << l strip

  sane-history = []

  { let(condition Debugger = ReplDebugger,
        pretty Multiline = true,
        pretty Colored = true):
      frame = 0

      { basic-repl(module, debug)
      } bind:
        .prompt ->
          restart(.use-prompt, "[" + frame to-s + "]> ")

        .loop ->
          (frame += 1)

        .quit -> exit(0)

        .input(str) -> (sane-history << str)

        .special("h") ->
          puts(":h\thelp")

        .evaluated(r) ->
          puts((text(" =>") <+> pretty doc(r)) render(76))
  } ensuring:
    when(history):
      File open(history, "a") [f]:
        f puts(*sane-history)
