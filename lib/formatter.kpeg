%% name = Atomy::Format::Parser

%%{
    require File.expand_path("../atomy.kpeg.rb", __FILE__)
    include Atomy::Format

    def create(x, *as)
      as << []
      x.send(:new, 1, *as)
    end
}

%atomy = Atomy::Parser

       line = { current_line }

    text(e) = < /[^\\%#{Regexp.quote(e)}]+/ > { text }
            | "\\" < /[%\(\)\{\}\[\]]/ > { text }
            | "\\" %atomy.escape:e { e }

  nested(e) = text(e)+:c { Chunk.new(0, [], c.join) }

      chunk = nested("")

    flagged = "%" flag*:fs segment:s
                { s.flags = fs; s }

       flag = "#"
                { Number.new(0, nil) }
            | "0" &("." /\d/ | /\d/)
                { ZeroPad.new(0) }
            | "." < /\d+/ >
                { Precision.new(0, text.to_i) }
            | < /\d+/ >
                { Number.new(0, text.to_i) }
            | < /[\.\+\*=<>,\?]/ >
                { Symbol.new(0, text) }

    segment = "p" "(" sub(")"):s ")" ("(" sub(")"):p ")")?
                { Pluralize.new(0, s, [], p) }
            | "l" "(" sub(")"):c ")"
                { create(Lowercase, c) }
            | "c" "(" sub(")"):c ")"
                { create(Capitalize, c) }
            | "u" "(" sub(")"):c ")"
                { create(Uppercase, c) }
            | "j" ("(" sub(")"):c ")" { c })+:cs
                { create(Justify, cs) }
            | "{" sub("}"):c "}"
                { create(Iterate, c) }
            | ("[" sub("]"):c "]" { c })+:bs ("(" sub(")"):d ")" { d })?
                { Conditional.new(0, Array(bs), [], d) }
            | "_" { create(Skip) }
            | "^" { create(Break) }
            | "%" { create(Indirection) }
            | "s" { create(String) }
            | "d" { create(Decimal) }
            | "x" { create(Hex) }
            | "o" { create(Octal) }
            | "b" { create(Binary) }
            | "r" { create(Radix) }
            | "f" { create(Float) }
            | "e" { create(Exponent) }
            | "g" { create(General) }
            | "c" { create(Character) }
            | "v" { create(Any) }
                { Formatter.new(0, Array(as)) }

     sub(e) = (flagged | nested(e))*:as { Array(as) }

       root = sub("")
