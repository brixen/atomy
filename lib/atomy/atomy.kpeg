%% name = Atomy::Parser

%% {
  class Operator
    def initialize(name, private = false)
      @name = name
      @private = private
    end

    attr_reader :name
    attr_writer :private

    def private?
      @private
    end

    def precedence
      op_info(@name)[:precedence] || 60
    end

    def associativity
      op_info(@name)[:associativity] || :left
    end

    def precedes?(b)
      precedence > b.precedence ||
        precedence == b.precedence &&
        associativity == :left
    end

    private

    def op_info(op)
      Atomy::CodeLoader.module.infix_info(op) || {}
    end
  end

  attr_writer :callback

  def callback(x)
    if @callback
      @callback.call(x)
    else
      x
    end
  end

  def operator?(x)
    if mod = Atomy::CodeLoader.module
      !!mod.infix_info(x)
    end
  end

  def current_position(target=pos)
    cur_offset = 0
    cur_line = 0

    line_lengths.each do |len|
      cur_line += 1
      return [cur_line, target - cur_offset] if cur_offset + len > target
      cur_offset += len
    end

    [cur_line, cur_offset]
  end

  def line_lengths
    @line_lengths ||= lines.collect { |l| l.size }
  end

  def current_column(x=pos)
    current_position(x)[1]
  end

  def continue?(x)
    y = current_position
    y[0] >= x[0] && y[1] > x[1]
  end

  def private_target(line=0)
    Atomy::AST::Primitive.new(line, :self)
  end

  def binary(o, l, r, p = false)
    Atomy::AST::Binary.new(l.line, l, r, o, p)
  end

  def resolve(a, e, chain)
    return [e, []] if chain.empty?

    b, *rest = chain

    if a && a.precedes?(b)
      [e, chain]
    else
      e2, *rest2 = rest
      r, rest3 = resolve(b, e2, rest2)
      resolve(a, binary(b.name, e, r, b.private?), rest3)
    end
  end

  def set_lang(n)
    @_grammar_lang = require("#{n}/language/parser").new(nil)
  end
}

             sp = (" " | "\t" | comment)*
            wsp = (" " | "\t" | "\n" | comment)*
         sig_sp = (" " | "\t" | comment)+
        sig_wsp = (" " | "\t" | "\n" | comment)+

        shebang = "#!" /.*?$/

        cont(p) = ("\n" sp)+ &{ continue?(p) }
                | sig_sp (("\n" sp)+ &{ continue?(p) })?
                | &.

           line = { current_line }

      # \p{S} matches ["$", "+", "<", "=", ">", "^", "`", "|", "~"]
      op_letter = < /[\p{S}!@#%&*\-\\.\/\?]/u > { text.to_sym }

       operator = < !/[~`]/ ":"? op_letter+ > { text.to_sym }

     identifier = < /[\p{Ll}_][\p{L}\d\-_]*/u > { text.tr("-", "_").to_sym }

        grouped = "(" wsp expression:x wsp ")" { x }

        comment = /--.*?$/ | multi_comment

  multi_comment = "{-" in_multi
       in_multi = /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ "{-" in_multi /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ /[-{}]/ in_multi

       delim(c) = (wsp "," wsp) | (sp "\n" sp)+ &{ current_column >= c }

     expression = level4
 one_expression = wsp expression:e wsp !. { e }

    expressions = { current_column }:c expression:x (delim(c) expression)*:xs
                    { [x] + Array(xs) }

  level0(no_op) = number
                | quote
                | quasi_quote
                | splice
                | unquote
                | string
                | constant
                | word(no_op)
                | block
                | list
                | prefix
         level1 = call
                | grouped
                | level0(true)
         level2 = scoped_constant
                | postfix
                | level1
         level3 = compose
                | level2
         level4 = language
                | macro
                | binary
                | level3

         number = line:line < /[\+\-]?0[oO][0-7]+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i(8)) }
                | line:line < /[\+\-]?0[xX][\da-fA-F]+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i(16)) }
                | line:line < /[\+\-]?\d+(\.\d+)?[eE][\+\-]?\d+/ >
                    { Atomy::AST::Literal.new(line, text.to_f) }
                | line:line < /[\+\-]?\d+\.\d+/ >
                    { Atomy::AST::Literal.new(line, text.to_f) }
                | line:line < /[\+\-]?\d+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i) }

          macro = line:line "macro" "(" wsp expression:p wsp ")" wsp block:b
                    { Atomy::AST::Macro.new(line, p, b.body) }

       language = "#language" wsp identifier:n { set_lang(n) } %lang.root

          quote = line:line "'" level2:e
                    { Atomy::AST::Quote.new(line, e) }
    quasi_quote = line:line "`" level2:e
                    { Atomy::AST::QuasiQuote.new(line, e) }
         splice = line:line "~*" level2:e
                    { Atomy::AST::Splice.new(line, e) }
        unquote = line:line "~" level2:e
                    { Atomy::AST::Unquote.new(line, e) }

         escape = number_escapes | escapes
        str_seq = < /[^\\"]+/ > { text }
         string = line:line "\"" < (("\\" escape) | str_seq)*:c > "\""
                    { Atomy::AST::String.new(
                        line,
                        c.join,
                        text.gsub("\\\"", "\"")
                      )
                    }

  constant_name = < /[A-Z][a-zA-Z0-9_]*/ > { text.to_sym }
       constant = line:line "::" constant_name:n
                  { Atomy::AST::ToplevelConstant.new(line, n) }
                | line:line constant_name:n
                  { Atomy::AST::Constant.new(line, n) }

scoped_constant = line:line scoped_constant:p "::" constant_name:s
                  { Atomy::AST::ScopedConstant.new(line, p, s) }
                | line:line level1:p "::" constant_name:s
                  { Atomy::AST::ScopedConstant.new(line, p, s) }

    word(no_op) = line:line identifier:n !{ no_op && operator?(n) }
                    { Atomy::AST::Word.new(line, n) }

         prefix = line:line !":" op_letter:o level2:e
                    { Atomy::AST::Prefix.new(line, e, o) }

        postfix = line:line postfix:e !":" op_letter:o
                    { Atomy::AST::Postfix.new(line, e, o) }
                | line:line level1:e !":" op_letter:o
                    { Atomy::AST::Postfix.new(line, e, o) }

          block = line:line ":" !op_letter wsp expressions?:es (wsp ";")?
                    { Atomy::AST::Block.new(line, Array(es), []) }
                | line:line "{" wsp expressions?:es wsp "}"
                    { Atomy::AST::Block.new(line, Array(es), []) }

           list = line:line "[" wsp expressions?:es wsp "]"
                    { Atomy::AST::List.new(line, Array(es)) }

  composes(pos) = line:line compose:l cont(pos) level2:r
                    { Atomy::AST::Compose.new(line, l, r) }
                | line:line level2:l cont(pos) level2:r
                    { Atomy::AST::Compose.new(line, l, r) }
        compose = @composes(current_position)

           args = "(" wsp expressions?:as wsp ")" { Array(as) }
           call = line:line level0(false):n args:as
                    { Atomy::AST::Call.new(line, n, as) }

      binary_op = operator
                | identifier:n &{ operator?(n) } { n }

  binary_c(pos) = cont(pos) (binary_op:o sig_wsp { o })+:os level3:e
                    { o = os.shift
                      [ Operator.new(o),
                        os.collect do |h|
                          [private_target, Operator.new(h, true)]
                        end,
                        e
                      ]
                    }
 binary_cs(pos) = binary_c(pos)+:bs { bs.flatten }

         binary = { current_position }:pos level3:l binary_cs(pos):c
                    { resolve(nil, l, c).first }
                | binary_cs(current_position):c
                    { c[0].private = true
                      resolve(nil, private_target, c).first
                    }


        escapes = "n" { "\n" }     | "s" { " " }      | "r" { "\r" }
                | "t" { "\t" }     | "v" { "\v" }     | "f" { "\f" }
                | "b" { "\b" }     | "a" { "\a" }     | "e" { "\e" }
                | "\\" { "\\" }    | "\"" { "\"" }    | "BS" { "\b" }
                | "HT" { "\t" }    | "LF" { "\n" }    | "VT" { "\v" }
                | "FF" { "\f" }    | "CR" { "\r" }    | "SO" { "\016" }
                | "SI" { "\017" }  | "EM" { "\031" }  | "FS" { "\034" }
                | "GS" { "\035" }  | "RS" { "\036" }  | "US" { "\037" }
                | "SP" { " " }     | "NUL" { "\000" } | "SOH" { "\001" }
                | "STX" { "\002" } | "ETX" { "\003" } | "EOT" { "\004" }
                | "ENQ" { "\005" } | "ACK" { "\006" } | "BEL" { "\a" }
                | "DLE" { "\020" } | "DC1" { "\021" } | "DC2" { "\022" }
                | "DC3" { "\023" } | "DC4" { "\024" } | "NAK" { "\025" }
                | "SYN" { "\026" } | "ETB" { "\027" } | "CAN" { "\030" }
                | "SUB" { "\032" } | "ESC" { "\e" }   | "DEL" { "\177" }
                | < . > { "\\" + text }

 number_escapes = /[xX]/ < /[0-9a-fA-F]{1,5}/ > { [text.to_i(16)].pack("U") }
                | < /\d{1,6}/ > { [text.to_i].pack("U") }
                | /[oO]/ < /[0-7]{1,7}/ > { [text.to_i(16)].pack("U") }
                | /[uU]/ < /[0-9a-fA-F]{4}/ > { [text.to_i(16)].pack("U") }


            top = expression:e { callback(e) }

           tree = { current_column }:c top:x (delim(c) top)*:xs
                    { [x] + Array(xs) }

           root = shebang? wsp tree:es wsp !. { Array(es) }
