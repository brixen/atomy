%% {
  def current_position(target=pos)
    cur_offset = 0
    cur_line = 0

    line_lengths.each do |len|
      cur_line += 1
      return [cur_line, target - cur_offset] if cur_offset + len > target
      cur_offset += len
    end

    [cur_line, cur_offset]
  end

  def line_lengths
    @line_lengths ||= lines.collect { |l| l.size }
  end

  def continue?(x)
    y = current_position
    y[0] >= x[0] && y[1] > x[1]
  end

  def op_info(op)
    Atomy::OPERATORS[op] || {}
  end

  def prec(o)
    op_info(o)[:prec] || 5
  end

  def assoc(o)
    op_info(o)[:assoc] || :left
  end

  def binary(o, l, r)
    Atomy::AST::BinarySend.new(l.line, l, r, o)
  end

  def resolve(a, e, chain)
    return [e, []] if chain.empty?

    b, *rest = chain

    if a && (prec(a) > prec(b) || (prec(a) == prec(b) && assoc(a) == :left))
      [e, chain]
    else
      e2, *rest2 = rest
      r, rest3 = resolve(b, e2, rest2)
      resolve(a, binary(b, e, r), rest3)
    end
  end

  def const_chain(l, ns, top = false)
    p = nil
    ns.each do |n|
      if p
        p = Atomy::AST::ScopedConstant.new(l, p, n)
      elsif top
        p = Atomy::AST::ToplevelConstant.new(l, n)
      else
        p = Atomy::AST::Constant.new(l, n)
      end
    end
    p
  end
}

             sp = (" " | "\t" | comment)*
            wsp = (" " | "\t" | "\n" | comment)*
         sig_sp = (" " | "\t" | comment)+
        sig_wsp = (" " | "\t" | "\n" | comment)+

        cont(p) = ("\n" sp)+ &{ continue?(p) } | sig_sp (("\n" sp)+ &{ continue?(p) })?

           line = { current_line }

    ident_start = < /[a-z_]/ > { text }
  ident_letters = < /([[:alnum:]\<\>~!@#\$%\^&*\-=\+\\\|.\/\?])*/ > { text }
   ident_letter = < /([[:alnum:]\<\>~!@#\$%\^&*\-=\+\\\|.\/\?])/ > { text }

      op_letter = < /[\<\>~!@#\$%\^&*\-=\+\\\|:.\/\?]/ > { text }

       operator = < op_letter+ > &{ text != ":" } { text }

     identifier = < ident_start ident_letters > { text.tr("-", "_") }

        grouped = "(" wsp expression:x wsp ")" { x }

        comment = /--.*?$/ | multi_comment

  multi_comment = "{-" in_multi
       in_multi = /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ "{-" in_multi /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ /[-{}]/ in_multi

       delim(c) = (wsp "," wsp) | (sp "\n" sp)+ &{ current_column >= c }

     expression = level3

    expressions = { current_column }:c expression:x (delim(c) expression)*:xs delim(c)?
                    { [x] + Array(xs) }

         level1 = true
                | false
                | self
                | nil
                | number
                | quote
                | quasi_quote
                | splice
                | unquote
                | string
                | macro_quote
                | headless
                | particle
                | constant
                | variable
                | block
                | grouped
                | list
                | unary
         level2 = send
                | level1
         level3 = macro
                | op_assoc_prec
                | binary_send
                | level2

           true = line:line "true" !ident_letter
                    { Atomy::AST::Primitive.new(line, :true) }
          false = line:line "false" !ident_letter
                    { Atomy::AST::Primitive.new(line, :false) }

           self = line:line "self" !ident_letter
                    { Atomy::AST::Primitive.new(line, :self) }

            nil = line:line "nil" !ident_letter
                    { Atomy::AST::Primitive.new(line, :nil) }

         number = line:line < /[\+\-]?0[oO][\da-fA-F]+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i(8)) }
                | line:line < /[\+\-]?0[xX][0-7]+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i(16)) }
                | line:line < /[\+\-]?\d+(\.\d+)?[eE][\+\-]?\d+/ >
                    { Atomy::AST::Primitive.new(line, text.to_f) }
                | line:line < /[\+\-]?\d+\.\d+/ >
                    { Atomy::AST::Primitive.new(line, text.to_f) }
                | line:line < /[\+\-]?\d+/ >
                    { Atomy::AST::Primitive.new(line, text.to_i) }

          macro = line:line "macro" "(" wsp expression:p wsp ")" wsp block:b
                    { Atomy::AST::Macro.new(line, p, b.block_body) }

       op_assoc = sig_wsp < /left|right/ > { text.to_sym }
        op_prec = sig_wsp < /[0-9]+/ > { text.to_i }
  op_assoc_prec = line:line "operator" op_assoc?:assoc op_prec:prec (sig_wsp operator)+:os
                    { Atomy::Macro.set_op_info(os, assoc, prec)
                      Atomy::AST::Operator.new(line, assoc, prec, os)
                    }

          quote = line:line "'" level1:e
                    { Atomy::AST::Quote.new(line, e) }
    quasi_quote = line:line "`" level1:e
                    { Atomy::AST::QuasiQuote.new(line, e) }
         splice = line:line "~*" level1:e
                    { Atomy::AST::Splice.new(line, e) }
        unquote = line:line "~" level1:e
                    { Atomy::AST::Unquote.new(line, e) }

         escape = number_escapes | escapes

        str_seq = < /[^\\"]+/ > { text }
         string = line:line "\"" (("\\" escape) | str_seq)*:c "\""
                    { Atomy::AST::String.new(line, c.join) }

    macro_quote = line:line identifier:n quoted:c (< [a-z] > { text })*:fs
                    { Atomy::AST::MacroQuote.new(line, n, c, fs) }

       # TODO: level1 isn't broad enough; #foo(1, 2) fails
       particle = line:line "#" (identifier | operator):n !level1
                    { Atomy::AST::Particle.new(line, n) }

  constant_name = < /[A-Z][a-zA-Z0-9_]*/ > { text }
       constant = line:line constant_name:m ("::" constant_name)*:s {
                    names = [m] + Array(s)
                    const_chain(line, names)
                  }
                | line:line ("::" constant_name)+:s {
                    names = Array(s)
                    const_chain(line, names, true)
                  }

       variable = line:line identifier:n
                    { Atomy::AST::Variable.new(line, n) }

          unary = line:line !":" op_letter:o level1:e
                    { Atomy::AST::Unary.new(line, e, o) }

           args = "(" wsp expressions?:as wsp ")" { Array(as) }

          block = line:line args?:as ":" !operator wsp expressions?:es (wsp ";")?
                    { Atomy::AST::Block.new(line, Array(es), Array(as)) }
                | line:line (args:as wsp { as })?:as "{" wsp expressions?:es wsp "}"
                    { Atomy::AST::Block.new(line, Array(es), Array(as)) }

           list = line:line "[" wsp expressions?:es wsp "]"
                    { Atomy::AST::List.new(line, Array(es)) }

   message_name = true
                | false
                | self
                | nil
                | number
                | quote
                | quasi_quote
                | splice
                | unquote
                | string
                | macro_quote
                | particle
                | constant
                | variable
                | block
                | list
                | unary

     sends(pos) = line:line send:r cont(pos) message_name:n args?:as (sp block)?:b
                    { Atomy::AST::Send.new(line, n, r, Array(as), b) }
                | line:line level1:r cont(pos) message_name:n args?:as (sp block)?:b
                    { Atomy::AST::Send.new(line, n, r, Array(as), b) }
                | line:line level1:r cont(pos) args:as !":" (sp block)?:b
                    { Atomy::AST::Send.new(line, Atomy::AST::Variable.new(line, "call"), r, Array(as), b) }
           send = sends(current_position)

       headless = line:line message_name:n args?:as sp block:b
                    { Atomy::AST::Send.new(
                        line,
                        n,
                        Atomy::AST::Primitive.new(line, :self),
                        Array(as),
                        b,
                        true
                      )
                    }
                | line:line message_name:n args:as (sp block)?:b
                    { Atomy::AST::Send.new(
                        line,
                        n,
                        Atomy::AST::Primitive.new(line, :self),
                        as,
                        b,
                        true
                      )
                    }

  binary_c(pos) = (cont(pos) operator:o sig_wsp level2:e { [o, e] })+:bs { bs.flatten }
    binary_send = level2:l binary_c(current_position):c
                    { resolve(nil, l, c).first }
                | line:line operator:o sig_wsp expression:r
                    { Atomy::AST::BinarySend.new(
                        line,
                        Atomy::AST::Primitive.new(line, :self),
                        r,
                        o,
                        true
                      )
                    }


        escapes = "n" { "\n" }
                | "s" { " " }
                | "r" { "\r" }
                | "t" { "\t" }
                | "v" { "\v" }
                | "f" { "\f" }
                | "b" { "\b" }
                | "a" { "\a" }
                | "e" { "\e" }
                | "\\" { "\\" }
                | "\"" { "\"" }
                | "BS" { "\b" }
                | "HT" { "\t" }
                | "LF" { "\n" }
                | "VT" { "\v" }
                | "FF" { "\f" }
                | "CR" { "\r" }
                | "SO" { "\016" }
                | "SI" { "\017" }
                | "EM" { "\031" }
                | "FS" { "\034" }
                | "GS" { "\035" }
                | "RS" { "\036" }
                | "US" { "\037" }
                | "SP" { " " }
                | "NUL" { "\000" }
                | "SOH" { "\001" }
                | "STX" { "\002" }
                | "ETX" { "\003" }
                | "EOT" { "\004" }
                | "ENQ" { "\005" }
                | "ACK" { "\006" }
                | "BEL" { "\a" }
                | "DLE" { "\020" }
                | "DC1" { "\021" }
                | "DC2" { "\022" }
                | "DC3" { "\023" }
                | "DC4" { "\024" }
                | "NAK" { "\025" }
                | "SYN" { "\026" }
                | "ETB" { "\027" }
                | "CAN" { "\030" }
                | "SUB" { "\032" }
                | "ESC" { "\e" }
                | "DEL" { "\177" }

 number_escapes = /[xX]/ < /[0-9a-fA-F]{1,5}/ > { [text.to_i(16)].pack("U") }
                | < /\d{1,6}/ > { [text.to_i].pack("U") }
                | /[oO]/ < /[0-7]{1,7}/ > { [text.to_i(16)].pack("U") }
                | /[uU]/ < /[0-9a-fA-F]{4}/ > { [text.to_i(16)].pack("U") }

         quoted = "\""
                  ( "\\\"" { "\"" }
                  | < "\\" . > { text }
                  | < /[^\\"]+/ > { text }
                  )*:c
                  "\""
                  { c.join }
                | "{"
                  ( "\\" < "{" | "}" > { text }
                  | < "\\" . > { text }
                  | < /[^\\\{\}]+/ > { text }
                  )*:c
                  "}"
                  { c.join }
                | "["
                  ( "\\" < "[" | "]" > { text }
                  | < "\\" . > { text }
                  | < /[^\\\[\]]+/ > { text }
                  )*:c
                  "]"
                  { c.join }
                | "`"
                  ( "\\`" { "`" }
                  | < "\\" . > { text }
                  | < /[^\\`]+/ > { text }
                  )*:c
                  "`"
                  { c.join }
                | "'"
                  ( "\\'" { "'" }
                  | < "\\" . > { text }
                  | < /[^\\']+/ > { text }
                  )*:c
                  "'"
                  { c.join }

           root = wsp expressions:es wsp !. { Array(es) }
