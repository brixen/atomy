test(conditions)

describe("condition"):
  describe(#signal):
    it("triggers matching handlers"):
      x = 0
      { signal(#foo) } bind: #foo -> (x =! 1)
      x should-be(1)

    it("does not trigger non-matching handlers"):
      x = 0
      { signal(#foo) } bind: #bar -> (x =! 1)
      x should-be(0)

    it("goes through all handlers, nearest-first"):
      x = []
      { { signal(#foo) } bind:
          #foo -> x << 1
      } bind:
        #foo -> x << 2

      x should-be([1, 2])

  describe(#restart):
    it("calls a named restart"):
      { with-restarts(ok -> 1):
          signal(#foo)
          0
      } bind: #foo -> restart(#ok);
          should-be(1)

    it("fails for an unknown restart name"):
      { { with-restarts(ok -> 1):
            signal(#foo)
            0
        } bind: #foo -> restart(#not-ok)
      } should-raise(NoRestartError)

    it("can send arguments to the restart"):
      { with-restarts(ok(x) -> x + 1):
          signal(#foo)
          0
      } bind: #foo -> restart(#ok, 41);
          should-be(42)

    it("may be nested"):
      a = []
      r = {
        r2 =
          with-restarts(use-value(v) -> do { a << 2, v }):
            with-restarts(use-square-of-value(v) -> do { a << 3, v * v }):
              signal(#foo)
              raise("inner: should be unreachable")

            raise("outer: should be unreachable")

        a should-be([1, 2])
        r2 should-be(42)
        a << 4
        5
      } bind:
        _ -> do:
          a << 1
          restart(#use-value, 42)

      a should-be([1, 2, 4])
      r should-be(5)

    it("calls the nearest restart if more than one have the same name"):
      res =
        { with-restarts(a(r) -> r):
            x =
              with-restarts(a(r) -> r):
                signal(#foo)

            [x, 2]
        } bind:
          #foo -> restart(#a, 0)

      res should-be([0, 2])
