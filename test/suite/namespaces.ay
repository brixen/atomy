describe("namespaces"):
  it("doesn't provide methods to static scopes that don't use it"):
    namespace(NotUsed):
      not-used := 1
      
    { not-used } should-raise(Atomy::MethodFail)
    
  it("lets scopes use methods after `using' the module"):
    namespace(Used):
      used := 1
      
    module(User):
      using(Used)
      used should-be(1)

  it("allows providing recursive methods"):
    namespace(Recursive):
      0 recursive := 0
      1 recursive := 1
      Fixnum recursive :=
        (- 2) recursive + (- 1) recursive
      
    module(RecursiveUser):
      using(Recursive)
      3 recursive should-be(2)

  it("allows methods defined in the module to use other methods"):
    namespace(SelfUser):
      self-user-a := self-user-b
      self-user-b := self-user-c
      self-user-c := 42
      
    module(SelfUserUser):
      using(SelfUser)
      self-user-a should-be(42)
      
  it("respects class hierarchy"):    
    data:
      Parent:
        Child1
        Child2

    Parent a := 0
    Child1 a := 1

    Parent new a should-be(0)
    Child1 new a should-be(1)
    Child2 new a should-be(0)

    namespace(Child1Overrider):
      Parent a := 2
      
    module(Child1OverriderUser):
      using(Child1Overrider)

      Parent new a should-be(2)
      Child1 new a should-be(1)
      Child2 new a should-be(2)
      
  it("does not bypass sender static scope when matching with zsuper"):
    namespace(SuperMatcher):
      1 super-matcher := 1
      Object super-matcher := 2
      
    { 2 super-matcher } should-raise(Atomy::MethodFail)
    
    module(SuperMatcherUser):
      using(SuperMatcher)

      1 super-matcher should-be(1)
      2 super-matcher should-be(2)

  it("provides methods used inside of `provide`"):
    namespace(A):
      in-a := 1

    namespace(B):
      using(A)
      in-b := in-a

    module(C):
      using(B)

      in-b should-be(1)
      in-a should-be(1)