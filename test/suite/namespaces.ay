describe("namespaces"):
  it("isolates method definitions"):
    namespace(NotUsed):
      not-used := 1

    { method(#not-used) } should-raise(NameError)

  it("provides methods for when `using' the namespace"):
    namespace(Used):
      used := 1

    using(Used):
      used should-be(1)

  it("can be extended into a module"):
    module(ExtenderModule):
      extend(Used)
      used should-be(1)

  it("can be included into a module"):
    module(User):
      include(Used)

    class(UserClassUser):
      include(User)

    UserClassUser new used should-be(1)

  it("provides instance methods"):
    class(ClassUser):
      include(Used)
      get-used := used

    ClassUser new used should-be(1)
    ClassUser new get-used should-be(1)

  it("provides instance methods to a subclass"):
    class(ClassUserSub < ClassUser):;
    ClassUserSub new used should-be(1)
    ClassUserSub new get-used should-be(1)

  it("provides methods defined in the namespace to each other"):
    namespace(SelfUser):
      self-user-a := self-user-b
      self-user-b := self-user-c
      self-user-c := 42

    class(SelfUserUser):
      include(SelfUser)

    SelfUserUser new self-user-a should-be(42)

  it("provides methods from included namespaces"):
    namespace(A):
      in-a := 1

    namespace(B):
      include(A)
      in-b := in-a

    class(C):
      include(B)

    C new in-b should-be(1)
    C new in-a should-be(1)

  describe(#where):
    it("provides methods for the duration of a block"):
      { foo(1, 2) should-be(3) } where: foo(a, b) := a + b

    it("does not leak method definitions"):
      { hidden(1, 2) should-be(3) } where: hidden(a, b) := a + b
      { method(#hidden) } should-raise(NameError)

    it("shadows method definitions"):
      outer(a, b) := a + b
      { outer(1, 2) should-be(-1) } where: outer(a, b) := a - b
      outer(1, 2) should-be(3)

    it("shadows when nested"):
      { outer2(2, 3) should-be(6)
        { outer2(2, 3) should-be(8)
        } where: outer2(a, b) := a ** b
      } where: outer2(a, b) := a * b
