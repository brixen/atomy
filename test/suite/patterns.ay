test(patterns)

atomy/describe("pattern-matching"):
  atomy/describe("expressions"):
    atomy/describe("quote"):
      atomy/it("does basic expression equality check"):
        ('abc match: 'abc -> true) should-be(true)
        ('(1 + 2) match: '(1 + 2) -> true) should-be(true)
        ('(1 * 2) match: '(1 + 2) -> true) should-be(nil)

    atomy/describe("quasi-quote"):
      atomy/it("matches expressions like quote"):
        ('abc match: `abc -> true) should-be(true)

      atomy/it("fails for expressions of different type"):
        ('abc match: `(1 + 1) -> true) should-be(nil)

      atomy/it("allows destructural binding via unquote"):
        ('(1 + 2) match: `(1 + ~x) -> x) should-be('2)

      atomy/it("matches expression attributes like method names"):
        ('(1 + 2) match: `(1 + 2) -> true) should-be(true)
        ('(1 + 2) match: `(1 * 2) -> true) should-be(nil)

      atomy/it("has the same quote/unquote semantics as a quasiquote"):
        ('(1 + `(2 + ~x)) match:
          `(1 + `(2 + ~~y)) -> y) should-be('x)

        ('(1 + `(~x + ~x)) match:
          `(1 + `(~x + ~~y)) -> y) should-be('x)

        ('(1 + `(~x + ~x)) match:
          `(1 + `(~y + ~~y)) -> y) should-be(nil)

      atomy/it("allows arbitrary patterns in an unquote"):
        ('(1 + 2) match: `(1 + ~('2)) -> true) should-be(true)
        ('(1 + 2) match: `(1 + ~('3)) -> true) should-be(nil)
